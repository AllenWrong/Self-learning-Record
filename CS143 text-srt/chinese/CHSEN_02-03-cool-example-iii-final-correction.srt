0
00:00:04,580 --> 00:00:08,530
大家好, 在这个视频中, 我们将结束我们对cool的概述
Hello again. In this video we're gonna wrap up our overview of cool with one more

1
00:00:08,530 --> 00:00:15,530
写一个很酷的程序的例子, 最后一个例子, 让我们看一个程序
example of writing a cool program. For our final example, let's look at a program

2
00:00:20,060 --> 00:00:26,630
这实际上是在操纵一些有趣的数据结构, 我们从这里开始
that actually manipulates some interesting data structure. So we'll begin here by

3
00:00:26,630 --> 00:00:33,630
打开一个文件, 让我们这次调用我们的程序列表。
opening up a file. And let's call our program list dot CL this time. And as

4
00:00:33,710 --> 00:00:40,710
通常, 我将开始编写我们的主要例程, 以及我们的主要方法。
usual, I will begin by writing our main routine, and our main method. And once

5
00:00:44,470 --> 00:00:51,470
让我们让它从输入输出中继承, 这样我们就可以在这里做输入/输出例程了。
again let's, let's make this inherit from I/O so we can do the I/O routines here.

6
00:00:54,979 --> 00:01:00,409
让我们从一些简单的事情开始, 就像往常一样, 让我们
And let's just begin with something very simple, as always. Let's just have

7
00:01:00,409 --> 00:01:04,199
这是一种打印出“Hello World”的东西, 但用了一种不同寻常的方式。
something that prints out quot;Hello Worldquot; but in a little bit of an unusual way.

8
00:01:04,199 --> 00:01:10,120
让我们, 我们最后会写一个列表, 一个列表抽象, 让我们先
Let's, we're going to end up writing a list, a list abstraction. And let's first

9
00:01:10,120 --> 00:01:13,940
用手工构建一个列表, 或者至少手工构建一个列表的元素, 然后
build a list by hand, or at least build the elements of a list by hand, and then

10
00:01:13,940 --> 00:01:20,250
我们将构建列表抽象并将它们放入一个列表中, 让我们
we'll actually build the list abstraction and put them in a list. So, let's have

11
00:01:20,250 --> 00:01:27,250
一些字符串, 我们会有我们的字符串hello, 这也说明了
some strings. So we will have our string hello, and this will also illustrate how

12
00:01:29,140 --> 00:01:32,910
你同时做多个LET绑定, 我不应该说
you do multiple LET bindings simultaneously. I shouldn't say

13
00:01:32,910 --> 00:01:38,240
同时, 如何做多个让绑定在一个LET表达式中, 所以你可以
simultaneously. How you do multiple LET bindings in one LET expression. So you do

14
00:01:38,240 --> 00:01:43,300
通过列出它们, 注意到它使用逗号作为分隔符
them by just listing them, and notice that this uses commas as a separator rather

15
00:01:43,300 --> 00:01:50,300
比分号作为终止符, 所以这个左绑定将定义为3
than semicolons as a terminator. So this left binding is going to define three

16
00:01:52,240 --> 00:01:59,240
名字, 你好, 世界, 和新线, 所有这些都是字符串, 然后我们要
names. Hello, world, and new line, all of which are strings. And then We're going to

17
00:02:10,360 --> 00:02:14,230
现在把它们打印在屏幕上, 所以我们想要做的是
now print these out on the screen, so we are going to want to be able to do out

18
00:02:14,230 --> 00:02:19,950
字符串, 由于main继承自self, 我们可以在没有对象的情况下做到这一点, 
string, and since main inherits from self, we can do that without an object there,

19
00:02:19,950 --> 00:02:25,870
因为它只是, 再次发送到self对象, 我们想要连接
because it just, again, dispatches to the self object. And we want to concatenate

20
00:02:25,870 --> 00:02:31,360
这些字符串以正确的顺序排列, 所以我们要做hello点, 因为hello是
these strings together in the right order. So we'll do hello dot, and since hello is

21
00:02:31,360 --> 00:02:36,260
一个字符串, 它可以连接到世界, 而世界是一个字符串, 所以它可以是
a string, it can be concatenated to world, and world is a string, so it can be

22
00:02:36,260 --> 00:02:43,110
连接到newline, 这应该可以完成这项工作, 就像可能一样
concatenated to newline And that should do the job. And just like probably one more

23
00:02:43,110 --> 00:02:48,450
关于这个的东西, 这些铅绑定在这里, 如果它, 
thing about this lead this, these lead bindings here. This notice if it, the

24
00:02:48,450 --> 00:02:52,110
逗号, 逗号是这里的分隔符, 意思是它不会在最后一个之后出现
comma is, the comma is the separator here, meaning it doesn't come after the last one

25
00:02:52,110 --> 00:02:56,900
在列表中, 所以它只是把它分成了列表, 所以它不是一个终结者。
on the list. So it just separates that into the list, so it's not a terminator.

26
00:02:56,900 --> 00:03:03,900
现在我们可以关闭主程序了, 关闭我们的类定义。
And now we can close up our main procedure. Close up our class definition.

27
00:03:04,660 --> 00:03:11,660
保存它, 现在看看它是否编译。哦, 太棒了！第一次尝试。我们运行它, 它
Save it and now see if it compiles. Oh amazing! First try. And we run it, and it

28
00:03:16,260 --> 00:03:22,680
像预期的那样打印hello world, 现在, 让我们, 而不是引入这三个
prints hello world, as expected. So now, let's, instead of introducing the three

29
00:03:22,680 --> 00:03:25,709
将字符串分开, 然后将它们连接在一起, 让我们写一个抽象
strings separately, and then concatenating them together, let's write an abstraction

30
00:03:25,709 --> 00:03:30,180
我们可以建立一个字符串列表, 然后这个抽象就会有一个函数
where we can build a list of strings. And then that abstraction will have a function

31
00:03:30,180 --> 00:03:37,170
在它里面做连接, 好了, 我们会有一个
within it to do the, to do the concatenation. Alright, so we'll have a

32
00:03:37,170 --> 00:03:44,060
类叫做list, 我想, 每个列表都需要有两个组件, 所以
class called list. And, every list needs to, I think, to have two components. So

33
00:03:44,060 --> 00:03:48,300
首先, 它会有列表中的项, 它会是一个字符串。
first, it's gonna have the item that's in the list, and that'll be a string. And

34
00:03:48,300 --> 00:03:52,430
然后当你有一个指向下一个指针, 到列表末尾的指针, 到
then when you have a pointer to the next, to the, to the tail of the list, to the

35
00:03:52,430 --> 00:03:58,890
列表的其余部分, 所以我有一个下一个字段, 点或者是另一个列表, 是
rest of the list. And so I have a next, field that, points or is another list, is

36
00:03:58,890 --> 00:04:04,209
另一个字符串列表, 现在我们需要一些方法来, 为了
another list of strings. Now we need a couple of methods in order to, in order to

37
00:04:04,209 --> 00:04:09,459
使用这个列表。我们需要能够以某种方式初始化一个列表。
use this list. We'll need to be able to initialize a list in some way. So the

38
00:04:09,459 --> 00:04:14,170
初始化函数将获取一个项目, 以及列表的其余部分, 下一部分
initialization function will take an item and, the rest of the list, the next part

39
00:04:14,170 --> 00:04:21,170
在这个列表中, 它会做什么呢？它需要设置
of the list. And, what is it going to do? Well it's gonna need to set the fields of

40
00:04:21,509 --> 00:04:24,889
这个对象, 所以这个必须作为一系列赋值语句来完成
the object, And so this one has to be done as a series of assignment statements. So

41
00:04:24,889 --> 00:04:31,210
我们需要一个语句块我们把这个项目设为I的参数, 我们会
we'll need a statement block and we will set the item to be the I argument. We'll

42
00:04:31,210 --> 00:04:38,210
设置下一个, 属性为N个参数, 现在, 我们想要, 这个
set the next, attribute to be the N argument. And now, we actually want, this

43
00:04:40,349 --> 00:04:45,309
这里的初始化对象, 这个, 这个方法, 返回对象本身。
initialized object here, this, this method here, to return the object itself. So

44
00:04:45,309 --> 00:04:49,759
这样就可以方便地将电话连接到听不清, 所以
that, and that'll be convenient for chained together calls to [inaudible]. So

45
00:04:49,759 --> 00:04:55,110
我们会让它返回self, 它会返回self对象, 这就是结束
we'll have it return self. It'll return the self object. And that's the end of out

46
00:04:55,110 --> 00:05:02,110
语句块, 然后这就是我们方法的结束, 我犯了一个错误
statement block. And then that is the end of our method. And, I made a mistake up

47
00:05:02,139 --> 00:05:06,639
这里, 我们要声明一个编织的返回类型, 它会返回什么
here. We've gotta declare the return type of a knit. And what it's going to return

48
00:05:06,639 --> 00:05:11,259
当然, 它返回一个类型列表的对象, 我需要列出一个列表声明
of course, it returns a, a object of type list. I'll need to put a list declaration

49
00:05:11,259 --> 00:05:16,889
好了, 这就解决了, 编织的问题, 现在我们可以用这个来构建, 
there. Alright, so that takes care of, of a knit . And now we can use this to build,

50
00:05:16,889 --> 00:05:23,889
在下面建立一个列表, 那么我们应该怎么做呢？让我们有一个新的变量
build a list down here. So what should we do? Let's actually have a new variable

51
00:05:24,460 --> 00:05:31,460
我们将在这里介绍, 这一系列的铅绑定。
called list. That we'll introduce here in this lead, this series of lead bindings.

52
00:05:32,229 --> 00:05:35,710
让我们从这三个对象中建立一个列表, 我们会说, 我们会有一个
And let's just build a list out of these three objects. So we'll say, we'll have a

53
00:05:35,710 --> 00:05:42,710
新的列表, 然后我们将初始化以包含字符串hello, 以及。
new list, and then we'll initialize to contain the string hello. And. What should

54
00:05:45,080 --> 00:05:50,629
列表的其余部分是？这应该是另一个列表, 它被初始化为
the, rest of the list be? Well that should be another list, which is initialized to

55
00:05:50,629 --> 00:05:57,629
字符串是世界, 而列表文件中应该包含的是另一个
have the string the world. And what should be inside of that list file, is another

56
00:06:00,020 --> 00:06:05,759
新的列表对象, 我们将初始化为新的行, 现在我们要做什么
new list object, which we'll initialize to have new line. And now what do we put

57
00:06:05,759 --> 00:06:08,210
这里, 这里有个小问题, 不是吗？我们需要放一个
here, actually there's a little bit of problem here isn't there? We need to put a

58
00:06:08,210 --> 00:06:13,719
这里是list对象, 但是我们不想分配一个新的列表对象, 我们想要
list object here. But we don't want to allocate a, a new list object, we want

59
00:06:13,719 --> 00:06:18,849
这就相当于一个空指针, 没有名字
that to be really the equivalent of a, of a null pointer. And there's no name for

60
00:06:18,849 --> 00:06:23,089
实际上, 在Cool中, 你不能写空指针的名字, 它是
that in Cool actually, you can't write down the name of a null pointer. It's

61
00:06:23,089 --> 00:06:29,059
被称为void, 没有, 没有, 没有特殊的符号, 所以我们会
called void in Cool. There's no, there's no, no special symbol for that. So we'll

62
00:06:29,059 --> 00:06:35,330
必须创建一个未初始化的变量, 这也将是, 
have to create a variable that is just not initialized. And that will be, as well,

63
00:06:35,330 --> 00:06:40,879
类型列表的未初始化变量实际上是空的, 它将是一个空指针。
uninitialized variable of type list will, in fact be void. It'll be a null pointer.

64
00:06:40,879 --> 00:06:46,699
我们称它为nil, 它是一个类型化列表, 没有初始化器, 所以nil
So let's call that nil. And it'll be a typed list, and no initializer. And so nil

65
00:06:46,699 --> 00:06:50,149
这里会指向空的点, 然后我们可以用nil来表示
there will point to nothing or the, the void point. And then we can use nil to

66
00:06:50,149 --> 00:06:55,259
在这里结束我们的列表, 然后我们必须关闭所有的params
terminate our list here. And then we have to close off all the params for all the

67
00:06:55,259 --> 00:07:01,949
在这里嵌套, 我想就是这样, 这就是我们的列表, 好的, 我们有
nesting here. And I think that's it. And so that will be our list. Okay, so we have

68
00:07:01,949 --> 00:07:08,689
这是三个字符串的列表, 现在我们要做的就是把它打印出来。
a list of three strings. And now what we want to do with that is to print it out.

69
00:07:08,689 --> 00:07:12,219
所以我们想要做的是把一个列表从列表中去掉, 然后
And so what we would like to do is to have a list fall off the list, and then a

70
00:07:12,219 --> 00:07:19,219
这个函数会把这个列表拉平我们把它打印出来, 这就是
function that's gonna flatten that list and we'll just print it. So that is the

71
00:07:19,719 --> 00:07:26,719
主程序应该做什么, 现在, 你必须把它写下来
what the, what the main program should do. And now. You have to write the flatten

72
00:07:27,520 --> 00:07:34,149
函数, 所以平展没有参数, 它会返回一个字符串, 它是
function. So flatten takes no arguments. And it's going to return a string. It's

73
00:07:34,149 --> 00:07:40,639
返回一个单弦, 平坦是一个很简单的函数, 
going to return a single string. And flatten is a pretty simple function. U h,

74
00:07:40,639 --> 00:07:46,490
我们要做的是, 实际上有两种情况, 一种是如果我们在
what do we have to do. Well. There's really two cases. One is if we're at the

75
00:07:46,490 --> 00:07:49,309
弦的末端, 另一个是如果我们还没有在弦的末端, 那么
end of the string, and the other is if we're not yet at the end of the string. So

76
00:07:49,309 --> 00:07:52,839
我们来测试一下, 那么我们怎么知道我们是不是在弦的末端呢？好吧, 如果
let's, test for that. So how do we know if we're at the end of the string? Well, if

77
00:07:52,839 --> 00:07:57,259
下一个指针是空的, 然后在字符串中没有, 没有更多的东西。
the next pointer is, is void, then there is no, nothing more in the string. And

78
00:07:57,259 --> 00:08:02,229
实际上这是一个很特殊的测试, 它被称为isvoid, 函数, 
there actually is a special test for that in Cool. It's called the isvoid, function,

79
00:08:02,229 --> 00:08:09,059
它是这样写的, 如果isvoid, 下一个, 好的, 下一场。
and it's written like this. So if isvoid, of next, okay? So [inaudible] next field.

80
00:08:09,059 --> 00:08:16,059
所以如果下一个域是空的, 那么我们要返回什么呢？保持, 然后
So if the next field is void, then what are we going to return? Keeps. Well then

81
00:08:16,569 --> 00:08:21,949
这里的结果是, item, 不管最后一个元素中的项是什么
the result here is just, the item, whatever the item was in this last element

82
00:08:21,949 --> 00:08:28,949
在列表中, 或者我们想要做的, 否则, 我们想要
of the list. And otherwise What we want to do, Well, otherwise, we want to take the

83
00:08:31,909 --> 00:08:38,909
我们想要连接到它, 这是把剩下的部分拉平的结果
item and we want to concatenate onto it, the result of flattening the rest of the

84
00:08:39,490 --> 00:08:46,490
这是我们的平坦方法, 让我们看看它是否有效, 让我们来编译
list. And that is our flattened method. So let's see if that works. So let's compile

85
00:08:54,500 --> 00:09:01,500
这里有一些语法错误, 让我们回过头来看看是什么
this. And we got a couple of syntax errors here. So let's go back and see what's

86
00:09:01,950 --> 00:09:08,950
继续, 我们这里有一个语法错误, 在最后, 平坦的方法。
going on. So we have a syntax error here, at the end of the, the flatten method. And

87
00:09:13,460 --> 00:09:18,170
我们看到, 我们省略了听不清来关闭一个条件, 所以有条件的
we see that we left out the [inaudible] to close a conditional. So a conditional has

88
00:09:18,170 --> 00:09:23,980
以听不清的方式结束, 好的, 让我们看看它是否有效
to be ended with, with [inaudible]. Alright, and let's see if that's working

89
00:09:23,980 --> 00:09:30,980
现在, 我们仍然有一个语法错误, 在第29行, 这里的错误是我们
now. And we still have a syntax error, at line 29. And the mistake here is that we

90
00:09:34,870 --> 00:09:41,360
忘记声明这个变量的类型, 它是一个列表, 然后
forgot to declare the type of this variable, which is a list. And then it

91
00:09:41,360 --> 00:09:46,150
把它初始化为这个我们写出来的大表达式, 让我
gets initialized to this to this big expression that we wrote out. Lemme just

92
00:09:46,150 --> 00:09:50,200
这里的缩进稍微好一点, 注意, 实际上是
do the indentation a little more nicely here. And notice, something actually is

93
00:09:50,200 --> 00:09:54,280
值得一提的是, 这个定义, 这个变量的定义
worth mentioning here that this definition here, this definition of the variable

94
00:09:54,280 --> 00:10:01,280
列表。依赖于前面的变量的定义, 所以, 每一个
list. Depends on the definition of the previous variables in the let. So, each of

95
00:10:01,330 --> 00:10:06,910
所以当一个let绑定被设定时, 这个被绑定的变量的名字实际上是
so when a let binding is made the name of the variable that's bound is actually

96
00:10:06,910 --> 00:10:12,810
在随后的let表达式中可用, 因此在本例中, 这个变量列表
available in subsequent let expressions. So in this case this variable list makes

97
00:10:12,810 --> 00:10:18,360
使用所有的hello, world, 和newline, 我们之前定义的是相同的
use of all of hello, world, and newline, Which we're defining earlier in the same

98
00:10:18,360 --> 00:10:25,360
让我们把它保存起来, 然后过来编译它, 我们看到了
lead constr uct. Let's save this, and come over here and compile it. And we see we

99
00:10:27,870 --> 00:10:34,030
代码中又出现了一个错误, 所以, 我们来到这里, 我们看到我们犯了一个错误
got another bug in the code. So, we come up here. We see we I've made a mistake

100
00:10:34,030 --> 00:10:38,390
这里, 我用了函数符号来表示下一个是平的
here. I've used functional notation here calling flattened of next and what I

101
00:10:38,390 --> 00:10:43,670
实际上, 想要做的就是将方法压缩到下一种方法, 这就是
actually wanted to do was to dispatch to next on the method flattened. So, that

102
00:10:43,670 --> 00:10:49,570
应该是这样写的, 好吧, 可能现在已经接近了, 我们来看看
should be written like that. All right, Probably getting close now. Let's see if

103
00:10:49,570 --> 00:10:56,570
它还能工作, 它编译, 现在让我们看看它是否运行, 确实如此, 
it works yet. Well it compiles and now let's see if it runs. And indeed it does,

104
00:11:01,510 --> 00:11:06,070
打印出来, hello world, 就像我们期望的那样, 现在让我们回到我们的程序
Prints out, hello world, Just as we expected. Now let's go back to our program

105
00:11:06,070 --> 00:11:11,650
让我们用一种方法来概括这个列表的抽象, 假设我们可以有一个
and let's generalize this list abstraction in one way. Let's say that we can have an

106
00:11:11,650 --> 00:11:17,680
任意的对象列表, 而不仅仅是字符串, 这就要求我们
arbitrary list of objects, not just strings. And that will require us to

107
00:11:17,680 --> 00:11:22,430
改变一些东西, 这样它就可以用一个对象来初始化了。
change a few things so it can be initialized now with an object. And now

108
00:11:22,430 --> 00:11:27,060
当需要将这个列表拉平时我们想要减少一个字符串, 我们想要
when it comes time to flatten this list we want to reduce a string. We want to

109
00:11:27,060 --> 00:11:33,760
现在产生一个打印表示, 但不是列表中的所有内容, 都是
present produce a print representation. But not everything in the, in the list, is

110
00:11:33,760 --> 00:11:38,870
必然是一个字符串, 我们需要一种方法来遍历列表, 做不同的事情, 
necessarily a string. And we need a way to traverse the list and do different things,

111
00:11:38,870 --> 00:11:41,370
对于不同类型的事物, 不同类型的事物
for different kinds of things that might be in the list for different types of

112
00:11:41,370 --> 00:11:46,420
可能出现在列表中的东西, 所以这是一个很酷的类型
things that might be in the list. And so there's a constructing cool for the type

113
00:11:46,420 --> 00:11:53,420
一个对象的, 和, 在运行时, 这个被称为, 案例结构, 所以, 
of, and, of an object, at run time and this is called, the case construct. So,

114
00:11:53,700 --> 00:11:59,240
让我先介绍一个let表达式, 我们会让字符串
let me first introduce a let expression here, we'll let the string that we're

115
00:11:59,240 --> 00:12:05,910
构造, 它是字符串类型的, 它会被初始化为
gonna construct, Which is of type string. And that's going to be initialized to

116
00:12:05,910 --> 00:12:11,200
现在, 它将会是一个案例, 我们要怎么做呢？
something, and now, it's going to be a case. And what do we put a case on? Well,

117
00:12:11,200 --> 00:12:14,820
它将取决于项目的类型, 所以列表中的项目可以
it's going to depend on the kind of thing the item is. So the item in the list could

118
00:12:14,820 --> 00:12:19,010
它可以是不同类型的类型我们想要做一个不同的操作
be, it could be different kinds of types and we want to do a different operation

119
00:12:19,010 --> 00:12:25,980
取决于具体项目是什么, 所以案例项目和关键字是
depending on what item actually is. So the case item and then the key word is of, and

120
00:12:25,980 --> 00:12:32,790
现在我们有了不同的案例表达的不同分支, 
now we have different branches of the case expression for different kinds of things,

121
00:12:32,790 --> 00:12:37,920
这可能在列表中, 假设这是一个听不清, 好的, 那么
that could be in the list. So let's say that if it's an [inaudible]. Okay, so what

122
00:12:37,920 --> 00:12:43,530
这就是说, 如果这个项是整数, 那么我们要重命名它
this does, is this says that if the item is an INT, then we're going to rename it

123
00:12:43,530 --> 00:12:48,130
对于I, 我们要把I绑定到那个整数然后我们可以做一些事情
to I, we're going to bind I to that integer and then we can do something with

124
00:12:48,130 --> 00:12:55,130
我。我们要怎么处理呢？好吧, 我们可能想要把它转换成
I. And what would we want to do with I? Well, we'd probably want to convert it to

125
00:12:55,180 --> 00:13:02,180
一个字符串, 所以我们要把I变成"I"如果事实上, 这个项目碰巧是
a string. So we'll do I to A quot;Iquot; And what if in fact. That item happened to be of

126
00:13:06,640 --> 00:13:09,830
类型字符串。列表中的项目必须是字符串类型的, 那么我们就可以
type string. The items in the list have to be of type string. Well, then we can just

127
00:13:09,830 --> 00:13:16,130
使用这个项目本身, 作为字符串表示, 我们可以这样做
use the item itself, as the string representation. And we can do this for

128
00:13:16,130 --> 00:13:18,650
其他类型的类型, 如果我们的系统中有其他类型的类型, 我们可以
other kinds of types. If we had other kinds of types in our system, we could

129
00:13:18,650 --> 00:13:23,610
继续列出其他的, 案例, 以及如何将它们转换为字符串
continue to list out other, cases here, and how to convert them into a string

130
00:13:23,610 --> 00:13:26,970
表示, 但我们这里有一个默认的情况, 我们会说如果它是任意的
representation. But let's just have a default case here. We'll say if it's any

131
00:13:26,970 --> 00:13:30,900
另一种类型, 也就是, 有分支, 有分支
other kind of type, which would, which would be covered by having, a branch

132
00:13:30,900 --> 00:13:35,480
如果它是, 类型对象, 我们称它为O, 那么我们就应该
saying that if it's, of, type object, we'll call it O, then we should just

133
00:13:35,480 --> 00:13:42,480
中止, 所以我们应该调用中止函数然后退出, 这是我们的
abort. And so we should just call the abort function and quit. And that's our

134
00:13:44,260 --> 00:13:50,100
案例, 它需要用一个关闭的关键字esag来结束, 同样的
case. It needs to be terminated with a closing keyword called esag, Again the

135
00:13:50,100 --> 00:13:57,100
相反的, 现在我们可以用我们在我们的基础上构建的
reverse of, of case. And now we can use that [inaudible] we constructed in our

136
00:13:59,070 --> 00:14:05,810
这里的函数很小, 如果下一个字段是空的那么我们就会返回
little function here. So if, if the next field is void then we're just gonna return

137
00:14:05,810 --> 00:14:12,320
字符串, 否则我们会返回这个字符串与
the string. Otherwise we're gonna return this string incatenated with the

138
00:14:12,320 --> 00:14:16,980
把剩下的部分都拉平了, 凯, 现在我们有几件事
flattening out of the rest of the list. Kay. Now there's a couple of things we

139
00:14:16,980 --> 00:14:22,250
必须要修正, 我们在这里使用I到一个方法, 这意味着列表需要
have to fix up. We used the I to A method here, which means that list needs to

140
00:14:22,250 --> 00:14:29,250
从A转到I, 这里还有一个问题, 我明白了。
inherit. From the, conversion class A to I. And there's another issue here, I see.

141
00:14:34,760 --> 00:14:41,760
这就在这里, 如果你注意到, 案例陈述需要
And that's right here. So, if you notice The, the. The case statement needs to

142
00:14:43,150 --> 00:14:48,060
产生一个弦, 好的, 结果是中止剂量不返回一个弦, 中止
produce a string. Okay, and it turns out that abort dose not return a string, abort

143
00:14:48,060 --> 00:14:52,180
实际上终止了这个程序, 但是它的类型是它返回一个对象, 所以
actually terminates the program, but it's type is that it returns an object. And so

144
00:14:52,180 --> 00:14:57,570
这里我们要说服类型检查器, 说服, 接受这个, 
here we have to convince the type checker, to convince, to accept this, piece of

145
00:14:57,570 --> 00:15:01,610
代码, 我们需要让这个分支在这里输入一个字符串, 我们可以做的是, 
code, and we need to get this branch here to type as a string. So what we can do,

146
00:15:01,610 --> 00:15:06,470
这很难看, 但这是一种方法, 我们把它放在一个block中
and this is ugly, but it's the way to do it, is we put it in a block, in a

147
00:15:06,470 --> 00:15:11,810
语句块, 我们先调用中止, 然后得到一个增益, 它会终止
statement block. We call abort first, and a gain, that will just terminate the

148
00:15:11,810 --> 00:15:15,230
程序, 现在我们可以在它之后加上任何字符串表达式, 然后
program. And now we can put any string expression we want after that, and that'll

149
00:15:15,230 --> 00:15:19,560
是, 它会给整个block提供一个类型字符串, 所以我们可以放空
be the, that'll give a type string to the entire block. So we can just put the empty

150
00:15:19,560 --> 00:15:22,710
例如, 这里的字符串, 必须用分号终止, 因为这个
string here, for example, and that has to be terminated with a semicolon, since this

151
00:15:22,710 --> 00:15:27,690
这不是块, 我们可以用花括号来结束, 好了, 这就是
isn't a block. And we can close, that, with a curly brace. Okay? So this is just

152
00:15:27,690 --> 00:15:32,250
我们必须要做的事情, 让类型检查器高兴, 这可能就是一切
something we have to do, to make the type checker happy. And that may be everything

153
00:15:32,250 --> 00:15:39,250
我们需要这样做, 让我们试着编译这个, 我们必须包括转移
we needed to do. So let's try compiling this. And we have to include the diversion

154
00:15:41,950 --> 00:15:48,950
我们有一个语法错误, 到目前为止, 那是因为我们忘记了
library. And we have one syntax error. So far. And that's because we forgot to put

155
00:15:52,190 --> 00:15:59,190
分号终止符, 在每一个, 每一个, 每一个, 变量
the, semicolon terminator on, on each of our, each of the, each of the, variables

156
00:15:59,620 --> 00:16:06,620
我们在Let中引入的, 好了, 保存一下, 我们再试一次。
that we were introducing in the let. Okay, got to save that. Let's try this again.

157
00:16:08,290 --> 00:16:14,110
哦, 我并没有真正解决语法错误, 那是因为我放了
And, oops, I didn't actually manage to fix the syntax error. And that's because I put

158
00:16:14,110 --> 00:16:19,540
在错误的地方用分号, 实际上, 我忘了, 变量是
the semicolon in the wrong place. Actually, I, I forgot. Variables that are

159
00:16:19,540 --> 00:16:26,540
借出的债券是用逗号隔开的, 但是, 这个案例的分支
bond in a lent are separated by, by commas. But, the branches of the case have

160
00:16:27,870 --> 00:16:32,710
被分号终止, 所以, 我之前说的是不正确的
to be terminated by semicolons. So, what I said before was incorrect about using

161
00:16:32,710 --> 00:16:39,060
分号来终止借出的绑定, 这只是我们需要的分支
semicolons to terminate lent bindings. It's just in case branches where we need

162
00:16:39,060 --> 00:16:42,890
在这个例子中, 好的, 不管怎样, 回到这个问题我们来看看
it, In this example. Alright, anyway coming back to this let's see if it

163
00:16:42,890 --> 00:16:49,690
编译, 它会。现在让我们运行它, 它起作用了, 当然我们没有
compiles. And it does. And now let's run it, And it works. Now of course we haven't

164
00:16:49,690 --> 00:16:56,440
实际上利用了在列表中有不同类型的对象的能力
actually exploited the ability to have different types of objects in the list. So

165
00:16:56,440 --> 00:17:03,440
让我们来做一下, 让我们在这里添加一个整数, 输入ints, 让我们, 给它a
let's, let's do that. Let's add an integer in here. Type ints and let's, give it a

166
00:17:07,880 --> 00:17:14,880
第42题, 我们可以把它插入到这里, 现在我们可以把任何对象, 变成一个编织
number 42. And we can insert it in here. And now we can pass any object, to a knit

167
00:17:25,019 --> 00:17:32,019
在第一个位置, 所以我们把42放在这里, 当我们编译的时候
in the first position. So we'll just put in 42 right there. And when we compile and

168
00:17:34,360 --> 00:17:41,360
运行这个, 它只打印hello world 42, 如果我们, 如果一切都像预期的那样
run this it just print hello world 42. If we, if everything goes as expected, And it

169
00:17:42,850 --> 00:17:46,700
这就结束了我们的小旅行, 听不清, 有一些特点
does, And that concludes our little tour of [inaudible]. There are a few features

170
00:17:46,700 --> 00:17:51,789
我们在这些例子中没有展示过, 但是你们可以看一下例子
that we haven't shown in these examples, but you can look in the examples

171
00:17:51,789 --> 00:17:57,330
目录, 用于更多的程序-更多的专业信息将会显示所有的内容
directory, for lots more programs - many more pro grams that will show you all the

172
00:17:57,330 --> 00:18:01,519
不同的语言和细节以及其他语言的细节, 以及
different ins and outs and details of the other language features as well as the

173
00:18:01,519 --> 00:18:02,440
我们已经讲过了。
ones we've covered here.
