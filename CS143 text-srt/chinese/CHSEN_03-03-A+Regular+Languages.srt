0
00:00:01,569 --> 00:00:05,009
在这个视频中, 我们要讲的是常规语言
In this video, we're gonna talk about regular languages which are used to

1
00:00:05,009 --> 00:00:12,009
指定编程语言的词法结构。
specify the lexical structure of programming languages. To briefly review

2
00:00:14,190 --> 00:00:18,640
编程语言的词法结构是一组令牌类。
the lexical structure of a programming language is a set of token classes. And

3
00:00:18,640 --> 00:00:24,060
每一个令牌类都由一些字符串组成, 现在我们需要一种方法
each one of the token classes consists of some set of strings. Now we need a way to

4
00:00:24,060 --> 00:00:28,789
指定哪一组字符串属于每个令牌类和常用工具
specify which set of strings belongs to each token class and the usual tool or

5
00:00:28,789 --> 00:00:34,550
这样做是为了使用常规语言, 在这个视频中, 我们将会像
doing that is to use regular languages. So in this video we're going to present like

6
00:00:34,550 --> 00:00:39,120
常规语言并定义它们是什么然后在接下来的视频中我们会讲到
regular languages and define what they are and then in subsequent videos we're going

7
00:00:39,120 --> 00:00:45,170
查看一些在实际编程语言中使用它们的例子。
to look at some examples using them in actual programming languages. To define

8
00:00:45,170 --> 00:00:52,170
一般的语言, 我们通常使用的是正则表达式。
the regular languages, we generally use something called regular expressions. And

9
00:00:53,120 --> 00:00:57,649
每个正则表达式团队现在都是一个集合, 有两个基本规则
each regular expression team now it's a set. There are two basic regular

10
00:00:57,649 --> 00:01:02,359
表达式, 如果我写单个字符C, 那是一个表达式
expressions. If I write the single character C, that's an expression and what

11
00:01:02,359 --> 00:01:09,359
音符是一种包含一根弦的语言, 也就是单字符C, 
at the notes is a language containing one string. Which is the single character C,

12
00:01:12,170 --> 00:01:19,040
好的, 这是一种基本形式对于任何一个字符, 我都能得到一种语言
okay, That's one basic form so for any single character I get a language with a

13
00:01:19,040 --> 00:01:23,250
一个字符串语言, 只有一个字符串, 然后唯一的字符串就是那个字符, 另一个字符串
one string language with just and then the only string is that character. Another

14
00:01:23,250 --> 00:01:30,250
普通语言的基本构建块是正则表达式epsilon
basic building block of regular languages is the regular expression epsilon which is

15
00:01:30,259 --> 00:01:36,180
语言, 它只包含一个字符串, 这一次是空字符串。
the language. That contains again just a single string, this time the empty string.

16
00:01:36,180 --> 00:01:41,960
有一件重要的事情要记住, epsilon不是空的
And, one thing that's important to keep in mind is that epsilon is not the empty

17
00:01:41,960 --> 00:01:45,840
语言, 对吧？所以这并不对应于空字符串和空集
language, okay? So this is not correspond to the empty string and the empty set of

18
00:01:45,840 --> 00:01:52,469
字符串, 它是一种只有一个字符串的语言, 即空字符串。
strings. It is a language that has a single string namely the empty string.

19
00:01:52,469 --> 00:01:58,240
除了两个基本正则表达式之外, 还有三个复合规则
Besides the two base regular expressions, there are three compound regular

20
00:01:58,240 --> 00:02:04,430
表达式, 我们把它们按顺序在这里, 第一个是a+b
expressions and we'll just go through them here in order. The first is a + b which

21
00:02:04,430 --> 00:02:10,540
对应于语言a和b的结合, 所以这就是集合a
corresponds to the union of the languages a and b. So this would be the set a such

22
00:02:10,539 --> 00:02:16,410
A在大A的语言中, 小A在大联盟的语言中, 
that a is in the language of big A, little a is in the language of big A union,

23
00:02:16,410 --> 00:02:21,450
小b, b用的是小b的语言所以这是两个集合的结合
little b such that b is in the language of little b so just the union of the two sets

24
00:02:21,450 --> 00:02:27,410
字符串, 连接就像字符串连接, 所以如果我有两种语言, 
of strings. Concatenation is like string concatenation. So if I have two languages,

25
00:02:27,410 --> 00:02:33,860
a和b, 或者两个正则表达式, a和b, 然后是a和b的串联
a and b, or two regula r expressions, a and b, then, the concatenation of a and b

26
00:02:33,860 --> 00:02:40,100
等于所有的字符串, 小的a和b的连接
Is equal to all of the strings. Little a concatenate with little b where a is drawn

27
00:02:40,100 --> 00:02:45,910
从语言大A和小b从b语言中提取出来, 所以这个
from the language big A and little b is drawn from the language big B. And so this

28
00:02:45,910 --> 00:02:50,210
是交叉分散操作。从a中选择一个字符串。
is cross sporadic operation. Choose a string from a. Choose a string from

29
00:02:50,210 --> 00:02:56,710
大写B, 然后组合, 把它们和字符串放在一起
capital B and then combine, put them together with the string from a first and

30
00:02:56,710 --> 00:03:01,170
从所有可能的组合字符串中选择字符串这是
choosing strings at all possible ways from all possible combined strings and that's

31
00:03:01,170 --> 00:03:06,170
语言a和b连接在一起最后是一种循环
the language a concatenated with b. And finally there's a kind of looping

32
00:03:06,170 --> 00:03:12,830
听不清, 这是一颗恒星或者叫做克雷恩迭代, 或者
[inaudible]. This is pronounced a star or is called the Kleene iteration and, or the

33
00:03:12,830 --> 00:03:19,830
克林闭包, 一颗恒星等于这个结合, 因为i大于等于0
Kleene closure. And a star is equal to the union. For i greater than = zero of a to

34
00:03:22,560 --> 00:03:28,040
i, a的i次方, 这是什么意思呢？a的i次方等于a
the i, a to the i-th power. What's that mean? Well, a to the i-th power is just a

35
00:03:28,040 --> 00:03:35,040
与自己连接的时间, 这是, 听不清, 注意
to concatenated with itself By times. So this is, [inaudible]. And note that

36
00:03:35,760 --> 00:03:41,260
因为i可以等于0, 这里的一种可能性是a的0, 所以a
because i can be = zero, one of the possibilities here is a to the zero, so a

37
00:03:41,260 --> 00:03:45,840
连接自身零次, 这是什么, 这就是语言
concatenate with itself zero times and what is that, well that's the language

38
00:03:45,840 --> 00:03:50,430
这就是语言中包含的空字符串, 所以空字符串是
epsilon. So that's the language contain the empty string. So the empty string is

39
00:03:50,430 --> 00:03:57,430
总是一个恒星的元素, 总结一下最后几张幻灯片
always an element of a star. To summarize the last couple of slides the regular

40
00:04:00,930 --> 00:04:04,900
在一些字母表上的表达式, 其中最小的表达式包括
expressions over some alphabet sigma. The smallest of that expressions that include

41
00:04:04,900 --> 00:04:11,840
下面, 我们来定义一下, 正则表达式r等于e
the following. So, let's define it so, the regular expression r are equal to epsilon

42
00:04:11,840 --> 00:04:17,169
总是一个正则表达式, 或者, 另一种可能是单一的
is always a regular expression. Or, another possibility is the single

43
00:04:17,168 --> 00:04:24,169
字符c, c是我们字母表中的一个元素, 对吧？这很重要
character c where c is an element of our alphabet, okay? So this is important the

44
00:04:24,220 --> 00:04:28,950
正则表达式定义了一些字母表, 所以我们必须选择一个家庭
regular expressions define with respect to some alphabet. So we have to pick a family

45
00:04:28,950 --> 00:04:34,480
会形成正则表达式的基本情况的字符, 
of characters that will form the base cases of the regular expression and here,

46
00:04:34,480 --> 00:04:37,530
你知道吗？我们有一个基本的正则表达式
you know? We have one base regular expression for each character in the

47
00:04:37,530 --> 00:04:42,930
字母表, 然后是复合表达式, 另一种可能性是
alphabet. And then we have the compound expressions. So, another possibility Is

48
00:04:42,930 --> 00:04:47,050
正则表达式是两个正则表达式的结合, 另一个是
that a regular expression is the union of two regular expressions. Another one is

49
00:04:47,050 --> 00:04:52,410
这是两个正则表达式的串联, 最后一个是
that the concatenation of two regular expressions. And the last one is that it

50
00:04:52,410 --> 00:04:59,410
可能是一个常规的扩展的迭代, 所以这5个案例是
could be the iteration of a regular expre ssion. So these five cases are the set of

51
00:04:59,520 --> 00:05:06,330
在给定的字母表上的正则表达式, 这里的语法是用来描述
regular expressions over a given alphabet. Now this syntax here for describing the

52
00:05:06,330 --> 00:05:11,330
有这些竖条的正则表达式以及这些不同的情况
regular expressions with these vertical bars and these different cases on the

53
00:05:11,330 --> 00:05:15,100
右手边的r的递归定义, 如果你没见过
right hand side in this recursive definition of r, If you haven't seen this

54
00:05:15,100 --> 00:05:19,330
之前, 这叫做语法, 这对这堂课来说不重要。
before, this is called the grammar. And that's not important for this lecture.

55
00:05:19,330 --> 00:05:23,990
这不是这个, 这节课是关于什么的但是我们讨论的是语法
It's not what this, this lecture is about but we're talking about grammars when we

56
00:05:23,990 --> 00:05:30,990
开始解析, 接下来我想做一些实际构建的例子
get to parsing. Next I'd like to do a few examples of actually building regular

57
00:05:31,600 --> 00:05:35,850
语言, 写山, 思考他们的意思, 就像我们
languages, writing the mountain and thinking about what they mean. And as we

58
00:05:35,850 --> 00:05:38,450
当我们谈论常规语言的时候, 我们首先要说的是
said, whenever we're talking about a regular language, we first have to say

59
00:05:38,450 --> 00:05:43,420
字母表是什么, 所以, 对于这些例子我们用字母0
what the alphabet is. And so, for these examples let's just use the alphabet zero

60
00:05:43,420 --> 00:05:48,750
第一, 这些是由0串组成的语言
and one. So these are going to be languages which consists of strings of 0s

61
00:05:48,750 --> 00:05:53,620
让我们从一个非常简单的例子开始, 让我们考虑一下语言
and 1s. And let's start with a very simple example. Let's think about the language

62
00:05:53,620 --> 00:06:00,620
一颗恒星和什么语言, 所以, 我们知道恒星的定义。
one star And what language that to note. So, well, we know the definition of star.

63
00:06:01,900 --> 00:06:08,900
如果你们还记得的话, 那就是i大于等于0的集合。
If you remember, that was the union over i greater than = zero of one to the i. Okay.

64
00:06:11,490 --> 00:06:17,280
那等于什么呢？这只是一个, 重复一遍, 这就是
And what is that equal to? Well, that's just one. Repeated i that's what the

65
00:06:17,280 --> 00:06:24,280
连接1到i的意思是, 好的, 它的意思是一个和它自己连接的
concatenation of one to the i means, okay. It means one concatenated with itself i

66
00:06:24,600 --> 00:06:30,960
所以这是空字符串, 这是一个连接
and so this is going to be the empty string. That's one concatenated with

67
00:06:30,960 --> 00:06:36,450
它本身是0, 后面跟着一个接着是11后面跟着一个接一个
itself zero followed by one followed by eleven followed by one concatenated with

68
00:06:36,450 --> 00:06:41,690
它本身是3, 后面跟着一个连4, 后面跟着一个
itself three followed by one concatenated with itself four followed by one

69
00:06:41,690 --> 00:06:47,150
和它自己连接很多次, 好的, 这个, 我们可以看到
concatenated with itself any number of times. Okay, And this, and so we can see

70
00:06:47,150 --> 00:06:54,150
这就等于所有的1 s字符串, 好吗？现在我们来做第二个
that this is just equal to all strings Of 1s, All right? Now let's do a second

71
00:06:56,590 --> 00:07:03,590
举个例子, 我们考虑一下语言1, 加上0和
example let's think about the language one. Plus zero concatenated with the

72
00:07:10,240 --> 00:07:17,240
语言一, 好吗？记住, 连接的工作方式是跨产品的
language one, okay? And remember how concatenation works is across products we

73
00:07:18,110 --> 00:07:23,270
取第一个表达式中的每一个字符串并与其中的每一个字符串相结合
take every string in the first expression and combining with every string in the

74
00:07:23,270 --> 00:07:30,270
第二个表达式, 所以这就等于字符串a被画出来的b
second expression. So this is going to be equal to the strings a b where a is drawn

75
00:07:32,120 --> 00:07:39,120
从1+0和b从1开始, 对吧？这是什么时候
from one + zero and b is drawn from one. All right? And, what can that be when

76
00:07:40,730 --> 00:07:45,490
A可以是1或0 b也可以是1所以实际上是这样的
there's two traces for a. A could be one or zero and b could be one so in fact this

77
00:07:45,490 --> 00:07:51,560
等于集合一, 一, 弦一, 一, 二, 听不清
is equal to the set one, one and the strings one, one, the second [inaudible]

78
00:07:51,560 --> 00:07:58,560
字符串1, 1和0, 好吗？我们再做一个例子
of the strings one, one and one zero. All right? Let's do another examples, slightly

79
00:07:58,889 --> 00:08:03,900
更复杂的, 让我们在这里建立一个在一个联合中有两个迭代的
more complex. Let's build up here to having two iterations in a union so have

80
00:08:03,900 --> 00:08:08,550
0+1, 想想它等于什么但我们已经知道了
zero + one and think of about what's that equal to but we've already know what

81
00:08:08,550 --> 00:08:13,520
一个等于。它等于所有的字符串, 所以通过类比为0
one is equal to. That's equal to all strings of ones and so by analogy zero

82
00:08:13,520 --> 00:08:17,669
必须是所有的0串然后我们取这两个数的结合这是
must be all strings of zeroes then we take the union of those two things so this is

83
00:08:17,669 --> 00:08:22,889
其实很容易写出来, 我们把它们写在这个符号里
actually really easy to write out. Let's write them out in this notation so we have

84
00:08:22,889 --> 00:08:29,889
0的i次方, 因为i又等于0, 好的, 这是零和, 1的
zero to the i, for i again equal to zero, okay. That's zero union with. One to the

85
00:08:30,639 --> 00:08:36,300
i或大于等于0, 这是所有的字符串, 这是一个集合
i or greater than = zero. That's the strings of all one. So there's a set at

86
00:08:36,299 --> 00:08:43,300
这是节点的表达式, 最后一个例子, 我们考虑0+1。
this expression to nodes. And for our last example, let's think about zero + one.

87
00:08:45,420 --> 00:08:52,380
现在, 这个迭代, 好了, 我们把恒星放在了两者的结合上
Now, that iterated. Okay? So, we put the star around the union of the two

88
00:08:52,380 --> 00:08:56,240
单独的字符而不是每个字符上的星星
individual character instead of having the star on each character individually in

89
00:08:56,240 --> 00:09:00,190
取这两个东西的结合, 那么这个表达式等于什么呢？
taking the union of the two things. So what is the, what is this expression equal

90
00:09:00,190 --> 00:09:07,190
我们来研究一下恒星的定义, 我们知道, 这是
to? Well, let's work with the definition of star. So, we know. That this is the

91
00:09:08,520 --> 00:09:15,230
联合除以i大于等于0+1的i次方, 这是什么
union over i greater than or equal to zero of zero + one to the i. And what does that

92
00:09:15,230 --> 00:09:21,750
看起来, 首先, 这是空字符串, 对吧？
look like, well, that looks like first of all, there's the empty string, right? And

93
00:09:21,750 --> 00:09:28,750
这个语言中的另一个字符串是, 抱歉, 是从0+1开始的
then another string in this language is, is. Excuse me, is drawn from zero + one

94
00:09:30,560 --> 00:09:34,810
所以这个, 我不应该说另一个字符串但是另一组字符串是
and so this, I shouldn't say another string but another set of strings is the

95
00:09:34,810 --> 00:09:41,810
语言0+1, 然后0+1与自身连接, 对吧？
language zero + one. And then zero + one concatenated with itself, okay? And in

96
00:09:41,900 --> 00:09:48,900
一般, 是0+1, i乘以它本身, 现在是什么
general, is going to be zero + one concatenated by itself i times. Now what

97
00:09:53,940 --> 00:09:57,940
这意味着, 这意味着每一个位置, 如果我们有一串长度i, 
does that mean? That means that every position, if we have a string of length i,

98
00:09:57,940 --> 00:10:03,810
在任何位置我们都可以选择0或1代入, 这适用于任何情况
at every position we could pick a zero or a one to plug in and this works for any

99
00:10:03,810 --> 00:10:07,330
长度字符串, 这对每个长度的字符串都是正确的事实上
length string. This is gonna be true of strings of every length and so in fact

100
00:10:07,330 --> 00:10:14,330
这个语言将会是所有的0和1的字符串, 事实上, 这是什么
this language is just going to be all strings Of 0's and 1's. In fact, what that

101
00:10:18,890 --> 00:10:22,050
意思是, 这是对我们字母表的循环效应, 我们的字母表包括
means is this, is the cycle effect on our alphabet. Our alphabet that consists of

102
00:10:22,050 --> 00:10:26,620
0和1所以这是所有字符串的集合你可以在整个过程中形成
zero and one and so this is the set of all strings that you can form over the entire

103
00:10:26,620 --> 00:10:31,710
字母表, 当你有一个规则的时候会有一个特殊的名字
alphabet, And that has a special name when that happens when you have a regular

104
00:10:31,710 --> 00:10:35,680
表示你可以从字母表中形成的所有字符串的集合, 
expression that denotes the set of all strings you can form out of the alphabet,

105
00:10:35,680 --> 00:10:40,300
我们把它写成sigma星, 对吧？所以这意味着所有的字符串
we write that as sigma star, okay? So just meaning that all the strings of the

106
00:10:40,300 --> 00:10:47,300
alphabet整合了很多次我想讲的最后一点
alphabet integrated as many times as you like One last point I wanna make on this

107
00:10:47,570 --> 00:10:51,550
在此之前, 我们有很多方法来写每一种
before we go on here is that there are actually lots of ways to write each of

108
00:10:51,550 --> 00:10:55,540
这些不同的语言, 没有一种独特的方式来写这些, 举个例子, 
these different languages. There's not a unique way to write these. So for example,

109
00:10:55,540 --> 00:10:59,390
我们用这个语言, 第二个我们做的, 让我换一下
let's just take this language here. The second one that we did, and let me switch

110
00:10:59,390 --> 00:11:03,180
颜色, 另一种写法, 因为我们知道它的意思
colors. Another alternative way to write this since we know the meaning of it is

111
00:11:03,180 --> 00:11:08,920
这两根弦1 1和1 0, 我可以把它写成1, 1, +1
these two strings one, one and one zero, I could have written it as one, one. + one

112
00:11:08,920 --> 00:11:13,390
0, 这意味着完全一样的东西, 我们用了两个表达式
zero and that would mean exactly the same thing. We used two expressions denote

113
00:11:13,390 --> 00:11:20,390
和一颗恒星的情况完全一样, 我可以把它写成1。+1。
exactly the same set similarly with one star, I could write this as one lt;i>. + one.lt;/i>

114
00:11:20,990 --> 00:11:24,180
因为这不会改变任何东西, 加入单弦也不会改变
And cuz this wouldn't change anything. Adding in the single string one wouldn't

115
00:11:24,180 --> 00:11:27,670
改变任何东西, 因为一个已经包含在其中一个。这可能有点
change anything since one is already included in onelt;i>. This might be kind of

116
00:11:27,670 --> 00:11:34,399
这是一种很傻的方式来写这个集合但它并不重要它有一个意义, 它的意思是
alt;/i> silly way to write that set but it doesn't matter it has a meaning and it means exactly

117
00:11:34,399 --> 00:11:37,990
同样的事情, 再次强调的是有不止一种方法
the same things as onelt;i>. The point again is that there is more than one waylt;/i>

118
00:11:37,990 --> 00:11:44,460
要把相同的集合写下来, 写下来, 你可以写多个正则表达式
to write down the same set to write, to write, you can write multiple regular expressions

119
00:11:44,460 --> 00:11:45,930
表示相同的集合。
that denote the same set.
