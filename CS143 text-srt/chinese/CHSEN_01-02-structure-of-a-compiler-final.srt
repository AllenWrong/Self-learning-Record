0
00:00:03,169 --> 00:00:06,670
欢迎回来, 在这节课的后半部分我们将继续我们的概述
Welcome back, in this second half of the lecture we'll continue with our overview

1
00:00:06,670 --> 00:00:13,670
编译器的结构。记得编译器有五个主要阶段, 
of the structure of a compiler. Recall that a compiler has five major phases,

2
00:00:16,199 --> 00:00:21,390
词法分析、解析、语义分析、优化和代码
lexical analysis, parsing, semantic analysis, optimization, and code

3
00:00:21,390 --> 00:00:25,510
现在我们将简要地讨论每一个问题, 我们将会
generation. And now we're going to briefly talk about each one, and we're going to

4
00:00:25,510 --> 00:00:30,850
解释一下编译器是如何理解这些的, 并将其与人类理解的方式进行类比
explain how a compiler understands these with an analogy to how humans understand

5
00:00:30,850 --> 00:00:37,850
理解一个程序的第一步, 对于编译器和a
English. The first step at understanding a program, both for a compiler and for a

6
00:00:38,379 --> 00:00:45,069
人类, 是要理解这些词, 现在, 人类可以看这个例句
human, is to understand the words. Now, humans can look at this example sentence

7
00:00:45,069 --> 00:00:52,069
马上意识到有四个词“这是一个”和“句子”
and immediately recognize that there are four words 'this is a' and 'sentence. And

8
00:00:52,789 --> 00:00:57,449
这是自动的, 你甚至都没想过但是有, 听不清
this is so automatic that you don't even think about it but there is [inaudible]

9
00:00:57,449 --> 00:01:01,209
真正的计算在这里, 你必须认识到分隔符, 也就是
real computation going on here. You have to recognize the separators, namely the

10
00:01:01,209 --> 00:01:07,759
空白, 标点符号, 像句号, 还有像资本这样的线索
blanks. And the punctuation, things like the periods, and also clues like capital

11
00:01:07,759 --> 00:01:13,289
字母, 这些帮助你把这组字母分成几组
letters. And these help you to divide up this group of letters into, a bunch of

12
00:01:13,289 --> 00:01:18,030
你能理解的词语, 只是为了强调这并不是完全的
words that you can understand. And just to emphasize that this is not completely

13
00:01:18,030 --> 00:01:24,100
很简单, 让我们看一下这个句子, 你可以读一下, 但是
trivial, let's take a look at this sentence. And you can read this, but it

14
00:01:24,100 --> 00:01:28,250
需要一点时间因为我把分隔符放进去了, 在一些奇怪的地方
takes a little bit of time Because I've put the separators in, in odd places. So

15
00:01:28,250 --> 00:01:34,799
你可以看到这个词, 这个词, 单词a, 和单词句, 但是
you can see the word is, the word this, the word a, and the word sentence. But

16
00:01:34,799 --> 00:01:38,820
这不是你马上就能想到的, 你必须要做
again this isn't something that comes to you immediately. You actually have to do

17
00:01:38,820 --> 00:01:44,060
有些人想知道这些分歧在哪里因为他们没有给你
some work to see where the divisions lie Because they're not given to you in the

18
00:01:44,060 --> 00:01:49,920
你已经习惯了, 词汇分析的目的是划分
way that you're used to. The goal of lexical analysis, then, is to divide the

19
00:01:49,920 --> 00:01:56,259
程序文本输入它的单词, 或者我们在编译器中调用的语句, 标记, 所以, 
program text into its words, or what we call in compiler speak, the tokens. So,

20
00:01:56,259 --> 00:02:00,009
这是一个程序文本的例子, 而不是一段英语
here's an, an example piece of program text now, instead of a piece of English

21
00:02:00,009 --> 00:02:05,579
文本, 让我们来看看这个并识别令牌, 这里有一些
text, and let's walk through this and identify the tokens. So, there's some

22
00:02:05,579 --> 00:02:11,489
很明显的是关键字, 比如if, 然后。还有我们想要的
obvious ones that are keywords, like if, and then. >> And else that we want to

23
00:02:11,489 --> 00:02:18,489
识别, 然后有变量名, 比如X, Y, z。
identify. And then there are variable names, things like X, and Y, and Z.

24
00:02:19,120 --> 00:02:25,519
还有常数, 比如1号和2号, 然后这里
There's also constants, things like number one, and the number two. And then there

25
00:02:25,519 --> 00:02:32,019
是一些运算符, 双等号是1, 赋值运算符是另一个。
are some operators, double equals is one, and the assignment operator is another.

26
00:02:32,019 --> 00:02:36,260
这已经是一个有趣的问题了, 我们怎么知道
And here's already an interesting question. How do we know that double

27
00:02:36,260 --> 00:02:41,170
等号不是两个单独的等号吗？我们怎么知道我们想要这个？
equals is not two individual equals signs? How do we know that we want this? To be a

28
00:02:41,170 --> 00:02:45,909
两倍相等所以我们想要, 而不是两个等于, 我们不知道是对的
double equal so we want, and not two single equals. Well, we don't know right

29
00:02:45,909 --> 00:02:50,610
现在, 我们将讨论这个问题在我们如何实现Lexico的讲座中
now but we'll talk about that. >> In the lecture on how we implement Lexico

30
00:02:50,610 --> 00:02:53,959
分析, 但是我们还没有完成这个例子中的所有令牌, 这里有一个
analysis. But we're not done with all the tokens in this example either, there's a

31
00:02:53,959 --> 00:03:00,040
再多一些, 半冒号, 标点符号也是令牌, 然后是分隔符
few more. The semi colons, the punctuation are also tokens, and then the separators

32
00:03:00,040 --> 00:03:04,560
也是令牌, 这是一个空白, 这是一个标记, 这是另一个空白, 这是
are also tokens, so here's a blank, that's a token, here's another blank, that's

33
00:03:04,560 --> 00:03:08,230
另一个标记, 这里有很多空格用来分隔东西
another token, and then there are lots of blanks here that serve to separate things

34
00:03:08,230 --> 00:03:12,150
就像关键字和变量名和其他符号一样
like the keywords and the variable names and other symbols from each other. And

35
00:03:12,150 --> 00:03:19,150
这些是这个例子的标志, 所以对于人类来说, 一旦这些词被理解了, 
those are the tokens of this example. So for humans, once the words are understood,

36
00:03:19,569 --> 00:03:22,659
下一步是理解句子的结构, 这是
the next step is to understand the structure of the sentence, and this is

37
00:03:22,659 --> 00:03:26,879
这叫做解析, 我们在小学里都学过, 这意味着图解
called parsing. And as we all learned in elementary school, this means diagramming

38
00:03:26,879 --> 00:03:32,110
句子, 这些图是树, 这是一个非常简单的过程。
sentences, and these diagrams are trees, and it's a very simple procedure. Let's

39
00:03:32,110 --> 00:03:36,969
看这个例子, 这一行是一个较长的句子, 第一步是解析
look at this example. This line is a longer sentence. The first step in parsing

40
00:03:36,969 --> 00:03:42,790
是识别句子中每个单词的作用, 所以我们有名词
is to identify the role of each word in the sentence. So we have things like nouns

41
00:03:42,790 --> 00:03:49,730
还有动词和形容词, 但是, 解析的实际工作是对它们进行分组
and verbs and adjectives. But then, the actual work of parsing is to group these

42
00:03:49,730 --> 00:03:53,860
把单词合并到更高层次的结构中, 例如, 这个
words together into higher level constructs. So for example, this

43
00:03:53,860 --> 00:04:00,860
特定的句子包括一个主语, 一个动词, 一个宾语, 好吗？
particular sentence consists of a subject, a verb, and an object, okay? And that

44
00:04:01,469 --> 00:04:04,719
实际上形成了一个完整的句子, 就在这里我们有了树的根
actually forms an entire sentence. So, right here we have the root of the tree

45
00:04:04,719 --> 00:04:07,989
被称为一个句子, 它被分解成各个组成部分, 高水平
called a sentence, and that's broken down into constituent parts. The high level

46
00:04:07,989 --> 00:04:11,890
结构, 就像我们说的, 是主语动词的宾语, 然后主语更多
structure, as we said, is subject verb to object. And then the subject is more

47
00:04:11,890 --> 00:04:18,890
很复杂, 就像这个物体一样, 这是一个解析英语句子的例子。
complicated, as is the object. And this is an example of parsing an English sentence.

48
00:04:19,940 --> 00:04:24,420
解析英语文本和解析程序文本之间的类比非常强烈。
The analogy between parsing English text and parsing program text is very strong.

49
00:04:24,420 --> 00:04:28,510
事实上, 它们是完全一样的, 这是我们的一个小例子
In fact, they're exactly the same thing. So here's our little example piece of code

50
00:04:28,510 --> 00:04:32,880
再一次, 让我们来解析它, 很明显, 这是一个if then else语句
again, so let's work through parsing it. So, clearly, this is an if then else

51
00:04:32,880 --> 00:04:38,160
语句, 我们的图的根, 我们的解析树, 将会是
statement, and so, the root of our diagram, of our parse tree, is gonna be if

52
00:04:38,160 --> 00:04:42,350
其他的, 听不清其他的都是由三个部分组成的, 有一个
then else. [inaudible] Nothing else consists of three parts. There's a

53
00:04:42,350 --> 00:04:46,290
谓词, a然后语句, 和L语句, 现在让我们看一下
predicate, a then statement, and an L statement. And now let?s look at the

54
00:04:46,290 --> 00:04:51,920
谓词由三个部分组成, 有一个变量, 一个比较运算符
predicate which consists of three pieces. There's a variable, a comparison operator

55
00:04:51,920 --> 00:04:57,850
另一个变量, 这些形成了一个关系, 所以比较
and another variable and together those form a relation. So the comparison between

56
00:04:57,850 --> 00:05:02,610
两件事是你可以作为有效谓词的一种东西, 类似地, 
two things is one of the things you can have as a valid predicate. Similarly, the

57
00:05:02,610 --> 00:05:08,560
然后语句包含一个赋值Z得到1, else语句
then statement consists of an assignment where Z gets one, and the else statement also

58
00:05:08,560 --> 00:05:15,560
有一个赋值的形式, Z得到两个, 所有这些都是一个解析树, 
has the form of an assignment, Z gets two. And to, all together this is a parse tree,

59
00:05:15,920 --> 00:05:19,320
在if-else中, 显示它的结构, 把它分解成它的结构
of the if-then-else, showing its structure, breaking it up into its

60
00:05:19,320 --> 00:05:26,320
组成部分, 现在, 一旦我们理解了句子结构, 
constituent pieces. Now, once we've understood the sentence structure, the

61
00:05:26,600 --> 00:05:30,930
下一步是试着理解所写的内容的意义, 以及, 
next step is to try to understand the meaning, of what has been written. And,

62
00:05:30,930 --> 00:05:36,180
这很难, 所以, 实际上我们不知道这对人类是如何起作用的, 我们不知道
this is hard. So, actually we don't know how this works for humans still. We don't

63
00:05:36,180 --> 00:05:40,850
理解, 在词法分析和解析之后会发生什么, 我们知道
understand, what happens after lexical analysis and parsing. We do know that

64
00:05:40,850 --> 00:05:46,280
人们用同样的方式进行词法分析和解析, 编译器
people do lexical analysis and parsing in much the same way, that compilers

65
00:05:46,280 --> 00:05:50,910
词汇分析和解析程序。但坦率地说, 理解含义是
lexically analyze and parse programs. But frankly, understanding meaning is

66
00:05:50,910 --> 00:05:55,830
这对于编译器来说太难了, 所以, 第一个重要的事情
something that is simply too hard for compilers. So, the first important thing

67
00:05:55,830 --> 00:06:01,710
要理解, 语义分析是编译器只能做非常有限的事情
to understand about, semantic analysis is that compilers can only do very limited

68
00:06:01,710 --> 00:06:06,490
各种各样的语义分析, 特别是那些
kinds of semantic analysis. And in particular the kinds of things that

69
00:06:06,490 --> 00:06:10,870
编译器通常会尝试捕捉不一致的地方, 所以, 如果程序是
compilers generally do are try to catch inconsistencies. So, if the program is

70
00:06:10,870 --> 00:06:15,930
不知何故, 自我不一致, 听不清编译器经常会注意到并报告
somehow self inconsistent, [inaudible] compilers can often notice that and report

71
00:06:15,930 --> 00:06:22,130
错误, 但是他们不知道程序应该做什么, 作为一个
errors. But they don't really know what the program is supposed to do. As an

72
00:06:22,130 --> 00:06:27,590
我们在语义分析中做的一件事, 再一次, 用一个类比
example of the kind of thing that we do in semantic analysis, again, using an analogy

73
00:06:27,590 --> 00:06:32,180
在英语中, 让我们考虑下面的句子, 杰克说杰瑞离开了他的
in English, let's consider the following sentence. So, Jack said Jerry left his

74
00:06:32,180 --> 00:06:37,930
在家里作业, 问题是, 他是谁, 在这里指的是什么？
assignment at home. And the question is, what, who does his, refer to here? It

75
00:06:37,930 --> 00:06:42,580
可能是他提到了杰瑞, 在这种情况下我们会读, 杰克说
could be that his refers to Jerry, in which case we would read, Jack said Jerry

76
00:06:42,580 --> 00:06:48,540
把杰里的作业留在家里, 或者叫杰克, 在这种情况下, 我们
left Jerry's assignment at home. Or it could refer to Jack. In which case, we

77
00:06:48,540 --> 00:06:52,630
杰克说, 杰里把杰克的任务留在家里, 他可以把这句话读出来。
could read the sentence as, Jack said Jerry left Jack's assignment at home. And

78
00:06:52,630 --> 00:06:58,450
如果没有更多的信息, 我们实际上不知道是哪一个, 他指的是, 
without more information, we actually don't know which one. His is referring to,

79
00:06:58,450 --> 00:07:02,980
不管是杰克, 还是Jerry, 更糟糕的是, 让我们看一下这个句子
whether it's Jack, or it's Jerry. And even worse, let's take a look at this sentence

80
00:07:02,980 --> 00:07:07,700
在下面, 杰克说, 杰克把作业留在家里了, 问题是
down here. Jack said, Jack left his assignment at home. And the question is

81
00:07:07,700 --> 00:07:14,700
有多少人参与了这个句子？它可能有很多
how many people are actually involved in this sentence? It could be as many as

82
00:07:14,860 --> 00:07:19,280
第三, 可能有两个单独的j, 甚至可以指代某人
three, there could be two separate Jacks and his, could even refer to somebody

83
00:07:19,280 --> 00:07:23,450
完全不同, 我们不知道这个故事的其余部分。
completely different. We don't know without seeing the rest of the story. That

84
00:07:23,450 --> 00:07:27,910
围绕着这句话, 他的所有可能性, 但也可以
surrounds this sentence, all the possibilities for his. But it could also

85
00:07:27,910 --> 00:07:32,740
尽可能的少, 只有一个人, 可能是杰克和杰克和他的
be as few as, only a single person. It could be that Jack and Jack and his are

86
00:07:32,740 --> 00:07:37,700
在这个句子里, 所有的人都是一样的, 所以这种模棱两可是真实的
all the same person in this sentence. And so this kind of ambiguity is a real

87
00:07:37,700 --> 00:07:44,700
问题, 在语义分析中, 编程语言的类比是
problem, in semantic analysis. And the analogy in programming languages is

88
00:07:46,250 --> 00:07:50,720
变量绑定, 所以我们会有变量, 在本例中, 是一个变量
variable bindings. So we would have variables, in this case, a variable called

89
00:07:50,720 --> 00:07:54,340
Jack或者不止一个变量叫Jack, 编程语言是
Jack or maybe more than one variable called Jack. And a programming language is

90
00:07:54,340 --> 00:08:01,210
会有非常严格的规则来防止我们在这个问题上的模棱两可
going to have very strict rules to prevent the kind of ambiguities we had in the

91
00:08:01,210 --> 00:08:06,900
上一张幻灯片上的英语句子, 你知道, 在这个例子中, 问题是
English sentences on the previous slide. So you know, in this example. Question is

92
00:08:06,900 --> 00:08:12,180
这个输出语句打印了什么值, 答案是, 它会
what value is printed by this output statement, and the answer is it's going to

93
00:08:12,180 --> 00:08:18,110
打印4, 因为变量Jack的使用绑定到这个定义
print four because this use of the variable Jack binds to this definition

94
00:08:18,110 --> 00:08:23,970
这里, 外面的定义是隐藏的, 所以外部的定义是不活跃的
here. And the outer definition is hidden. So the outer definition is not active in

95
00:08:23,970 --> 00:08:27,390
这个范围, 因为它被内部定义隐藏了这只是一个
this scope because it is hidden by the inner definition and that is just a

96
00:08:27,390 --> 00:08:34,390
许多词法作用域的编程语言的标准规则, 现在是飞行员
standard rule of a lot of lexically scoped programming languages. Now the pilots

97
00:08:34,990 --> 00:08:39,300
除了分析变量绑定之外, 还要执行许多语义文本。
perform many semantic texts besides analyzing the variable bindings. And so

98
00:08:39,299 --> 00:08:45,829
这是另一个英语例子, 杰克在家里看了她的家庭作业, 在下面
here's another example in English. So Jack looked her homework at home. And, under

99
00:08:45,829 --> 00:08:49,949
通常的命名规则, 假设Jack是男性, 我们知道有一种类型
the usual naming conventions, assuming that Jack is male, we know there's a type

100
00:08:49,949 --> 00:08:56,050
杰克和她之间的不匹配, 所以我们知道, 不管她是什么, 都不是杰克。
mismatch between Jack and her. So we know that, whatever her is, it is not Jack.

101
00:08:56,050 --> 00:08:59,610
因此, 我们知道这个句子讲的是两种不同的
And, and therefore we known that this sentence is talking about two different

102
00:08:59,610 --> 00:09:06,569
人们, 这是, 类似于类型检查, 第四个编译阶段, 
people. And so this is, analogous to type checking. The fourth compiler phase,

103
00:09:06,569 --> 00:09:10,959
优化, 在日常英语使用中没有很强的对应关系
optimization, doesn't have a very strong counterpart in everyday English usage but

104
00:09:10,959 --> 00:09:14,480
这有点像编辑, 事实上, 它很像专业人士
it's a little bit like editing. And, in fact, it's a lot like what professional

105
00:09:14,480 --> 00:09:18,779
编辑们在需要减少一篇文章的长度的时候才会这样做
editors do when they have to reduce the length of an article to get it down to

106
00:09:18,779 --> 00:09:23,889
一些单词预算, 例如, 我这里有一个短语, 但是有一点
some word budget. So, for example, I have this phrase right here, but a little bit

107
00:09:23,889 --> 00:09:29,060
就像结束, 如果我不喜欢它, 如果我认为它太长, 我可以替换
like ending; and if I didn't like it, if I thought it was too long, I could replace

108
00:09:29,060 --> 00:09:36,060
中间的四个词, 有两个词, 类似于, 现在它说, 但类似于
the middle four words, with two words. Akin to. So now it says, but akin to

109
00:09:36,290 --> 00:09:40,250
编辑, 这和原来的短语是一样的, 但是使用
editing, and that means exactly the same thing as the original phrase, but uses

110
00:09:40,250 --> 00:09:47,250
更少的单词, 程序优化的目标是修改程序
fewer words. And the goal in program optimization Is to modify the program so

111
00:09:47,279 --> 00:09:51,180
它使用较少的资源, 也许我们想用更少的时间, 我们想要
that it uses less of some resource. Maybe we want to use less time, we want the

112
00:09:51,180 --> 00:09:57,730
程序运行得更快也许我们想让它使用更少的空间这样我们就能容纳更多的空间
program to run faster maybe we want it to use less space so that we can fit more

113
00:09:57,730 --> 00:10:02,329
内存中的数据, 对于手持设备我们可能会对减少量感兴趣
data in memory. For a handheld device we might be interested in reducing the amount

114
00:10:02,329 --> 00:10:06,910
它使用的权力, 如果我们有外部交流我们可能会感兴趣
of power that it uses. If we have external communication we might be interested in

115
00:10:06,910 --> 00:10:12,220
减少网络消息的数量或数据库访问的数量。
reducing the number of network messages or the number of database accesses. And

116
00:10:12,220 --> 00:10:17,800
有很多资源我们可能想要改进其他程序的使用
there's any number of resources that we might want to improve other program's use

117
00:10:17,800 --> 00:10:24,800
这是一个程序可能做的优化的简单例子。
of. So here's a simple example of the kinds of optimizations a program might do.

118
00:10:28,019 --> 00:10:32,600
我们可以在编译器中有一个规则说X等于Y乘以0, 等于
We can have a rule in our compiler that says X equals Y times zero, is the same as

119
00:10:32,600 --> 00:10:36,769
X等于0, 这看起来是一个真正的进步, 因为它没有做
X equals zero. And this seems like a real improvement, because instead of doing the

120
00:10:36,769 --> 00:10:42,449
乘以, 我们可以做一个作业, 所以我们通过这样做来节省一些计算。
multiply, we can just do an assignment. So we save some computation by doing that.

121
00:10:42,449 --> 00:10:47,670
不幸的是, 这不是一个正确的规则, 这是很重要的一点
Now unfortunately this is not a correct rule. And this is one of the important

122
00:10:47,670 --> 00:10:51,449
关于编译优化的知识是, 它并不总是
things to know about compiling optimization, is that it's not always

123
00:10:51,449 --> 00:10:57,249
显然, 什么时候进行某些优化是合法的, 现在结果是
obvious when it's legal to do certain optimizations or not. Now it turns out

124
00:10:57,249 --> 00:11:04,249
这个特定的规则对于整数是有效的, 如果X和Y是
That this particular rule is valid for integers. Okay, so if X and Y are

125
00:11:04,819 --> 00:11:10,379
整数, 然后乘以0总是和签名一样
integers, then multiplying by zero is always the same thing as just signing

126
00:11:10,379 --> 00:11:17,379
0, 但是, 它对于浮点数是无效的, 为什么呢, 因为你
zero. But, it's invalid for floating point. And why is that, well because you

127
00:11:20,350 --> 00:11:24,540
必须了解IEEE浮点标准的一些细节, 但是有一个
have to know some details of the IEEE floating point standard, but there is a

128
00:11:24,540 --> 00:11:29,550
IEEE标准中的特殊数字不是一个数字, 结果是
special number in the IEEE standard called not a number and it turns out that

129
00:11:29,550 --> 00:11:36,550
不是一个叫NaN乘以0的数等于一个数字, 任何一个
not a number called a NaN times zero is equal to not a number. Any particular

130
00:11:37,610 --> 00:11:43,540
非数乘以零不等于零如果X和Y是绘图点数字, 你
non-number times zero is not equal to zero If X and Y are plotting point numbers, you

131
00:11:43,540 --> 00:11:47,790
不能做这个优化, 事实上, 如果你做了这个优化, 它就会崩溃
can't do this optimization. In fact, if you did this optimization, it would break

132
00:11:47,790 --> 00:11:52,470
某些非常重要的算法依赖于适当的传播
certain very important algorithms that rely on the proper propagation of

133
00:11:52,470 --> 00:11:59,470
不是一个数字, 最后, 最后一个编译器阶段是代码生成
not a number. Finally, the last compiler phase is code generation, often

134
00:12:00,689 --> 00:12:07,040
被称为代码Gen和代码Gen, 可以生成汇编代码, 这是最多的
referred to as Code Gen, and Code Gen, can produce assembly code. That's the most

135
00:12:07,040 --> 00:12:10,579
编译器会产生一般的东西, 但一般来说, 它是
common thing that a compiler would produce. But in general, it's a

136
00:12:10,579 --> 00:12:15,040
翻译成其他语言, 这完全类似于人类
translation into some other language. And this is, entirely analogous to human

137
00:12:15,040 --> 00:12:21,499
翻译, 就像人类翻译可能会翻译, 英语为法语, a
translation. So just as a human translator might translate, English into French, a

138
00:12:21,499 --> 00:12:28,499
编译器会将一个高级程序转换成汇编代码。
compiler will translate a high level program into assembly code. To wrap up,

139
00:12:28,680 --> 00:12:34,360
几乎每个编译器都有我们列出的五个阶段, 但是, 比例
almost every compiler has the five phases that we outlined. However, the proportions

140
00:12:34,360 --> 00:12:38,899
这些年来发生了很多变化, 如果我们回到FORTRAN I和
have changed a lot over the years, and if we were to go back to FORTRAN I and

141
00:12:38,899 --> 00:12:43,809
看看编译器的内部, 我们可能会看到它的大小和复杂性
look inside of that compiler, we would probably see a size and complexity that

142
00:12:43,809 --> 00:12:49,550
看起来是这样的, 我们有一个相当复杂的词汇分析阶段, 一个
looks something like this. We have a fairly complex lexical analysis phase, an

143
00:12:49,550 --> 00:12:56,550
同样复杂的解析阶段, 一个非常小的语义分析阶段, A。
equally complicated parsing phase, a very small semantic analysis phase, a. A fairly

144
00:12:57,199 --> 00:13:03,980
涉及到优化阶段和另一个相当复杂的代码生成阶段。
involved optimization phase and another fairly involved code generation phase. And

145
00:13:03,980 --> 00:13:10,259
所以我们看到了一个编译器其中的复杂度是sp, 在整个过程中均匀分布
so we see a compiler where the complexity was sp, spread fairly evenly throughout

146
00:13:10,259 --> 00:13:15,199
除了它的语义分析, 它在早期是非常弱的, 今天
except for its semantic analysis which is very weak in the early days. And today

147
00:13:15,199 --> 00:13:19,749
如果我们看一个现代的编译器你会看到几乎没有什么延长, 非常小
if we look at a modern compiler you'll see almost nothing in lengthening, very little

148
00:13:19,749 --> 00:13:25,269
在解析中, 因为我们有非常好的工具来帮助我们编写这两个阶段。
in parsing, because we have extremely good tools to help us write those two phases.

149
00:13:25,269 --> 00:13:31,569
我们会看到一个相当复杂的主题分析阶段, 我们会看到一个很大的
We would see a fairly involved thematic analysis phase. We would see a very large

150
00:13:31,569 --> 00:13:36,930
优化阶段, 这实际上是所有现代的主要组成部分
optimization phase, and this is in fact the dominant component off all modern

151
00:13:36,930 --> 00:13:43,290
编译器, 以及一个小的代码生成阶段因为我们再次理解
compilers, and the a small code-generation phase because again we understand that

152
00:13:43,290 --> 00:13:48,949
很好, 很好, 这就是这节课的内容, 以后的课程, 我们来看看
phase very, very well. That's it for this lecture. Future lectures, we'll look at

153
00:13:48,949 --> 00:13:50,580
每一个阶段都有详细的描述。
each of these phases in detail.
