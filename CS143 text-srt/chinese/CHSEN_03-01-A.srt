0
00:00:01,900 --> 00:00:05,190
欢迎回来, 这是我们长系列的第一个视频
Welcome back. This is the first video in our long series of the

1
00:00:05,190 --> 00:00:12,190
编译器的实现, 上次的调用编译器有五个阶段。
implementation of compilers, The call from last time that a compiler has five phases.

2
00:00:14,009 --> 00:00:18,400
我们首先要讲的是词汇分析这可能会让我们
We're gonna begin by talking about lexical analysis and this will probably take us

3
00:00:18,400 --> 00:00:21,480
3到4个视频至少要讲完然后我们会继续讲
three to four videos to get through at least and then we'll, we will be moving on

4
00:00:21,480 --> 00:00:28,320
为了其他阶段, 让我们从一个小的代码片段开始。
in order to the other phases. Let's start by looking at a small code fragment. The

5
00:00:28,320 --> 00:00:34,090
词法分析的目的是将这段代码划分为词汇单元
goal of lexical analysis is to divide this piece of code up. Into lexical units so

6
00:00:34,090 --> 00:00:40,860
比如关键字如果变量名i, n, j和关系运算符
things like the keyword if the variable names i, n, j and the relational operator

7
00:00:40,860 --> 00:00:45,370
双等号, 等等, 现在作为一个人, 这是。我们上节课讲过
double-equals and so on. Now as a human being this is. As we discussed last time

8
00:00:45,370 --> 00:00:50,940
这是一件很容易做的事情因为有各种各样的视觉线索
this is a very easy thing to do because there are all kinds of visual clues about

9
00:00:50,940 --> 00:00:55,120
单位位于不同单位之间的边界, 但a
where the units lie Where the boundaries between the different units lie but a

10
00:00:55,120 --> 00:01:01,260
像词汇分析器这样的程序, 它没有那种奢侈, 事实上
program like lexical analyzer. It doesn't have that kind of luxury. In fact what

11
00:01:01,260 --> 00:01:05,119
分析者会看到的是更像这样的东西, 所以
the, what the likes of analyzer will see is something that looks more like this. So

12
00:01:05,119 --> 00:01:10,970
这里我重写了, 代码就像一个字符串, 包含了所有的空格符号
here I overwritten, the code out just as a string, with all the white space symbols

13
00:01:10,970 --> 00:01:14,540
从这个表达式中, 这是一个线性字符串, 
included and is from, from this representation, this is a linear string,

14
00:01:14,540 --> 00:01:18,540
你可以把它看成是词汇分析器必须工作的文件中的字节
you can think of this as bytes in the file that the lexical analyzer has to work and

15
00:01:18,540 --> 00:01:22,640
它会穿过, 在不同的单位之间放置分隔物, 所以, 
it's going to mark through, placing dividers between the different units. So,

16
00:01:22,640 --> 00:01:27,140
它会意识到那里有一个分裂, 在白色空间和
it will recognize that there's a division there, between the white space and the

17
00:01:27,140 --> 00:01:32,280
关键字, 然后是关键字后面的除法还有更大的空间, 打开
keyword. Then a division after the keyword and there's more a wide space, the open

18
00:01:32,280 --> 00:01:36,370
paren, i, 另一个宽的空间, 双等号, 等等
paren, the i, another wide space, double equals and so on and it goes through

19
00:01:36,370 --> 00:01:43,280
画出这些线, 把弦插入到它的词汇单元中, 所以我不会
drawing these lines diving up. The, the string into its lexical unit, So I won't

20
00:01:43,280 --> 00:01:50,280
完成整个事情, 但你应该明白, 现在, 它不仅仅是放置这些东西
finish the whole thing but you should get the idea. Now, it doesn't just place these

21
00:01:50,810 --> 00:01:55,250
但是字符串中的分规, 它不只是识别子字符串, 它也
dividers in the string however. It doesn't just recognize the substrings. It also

22
00:01:55,250 --> 00:02:01,659
需要根据角色的角色对字符串的不同元素进行分类。
needs to classify the different elements of the string according to their role. We

23
00:02:01,659 --> 00:02:08,170
调用这些令牌类, 或者有时, 我将其命名为令牌的类。
call these token classes. Or sometimes, I'll just call it the class of the token.

24
00:02:08,169 --> 00:02:15,170
在英语中, 这些角色是名词, 动词, 形容词, 好的
And in English, these roles are things like noun, verb, adjective. Okay and there

25
00:02:18,069 --> 00:02:23,620
是, e是更多的, 至少是更多的, 在编程中
is, ther e are many more or at least or some more. And in the programming

26
00:02:23,620 --> 00:02:30,620
语言, 类, 令牌类都是标识符, 
language, the classes, the token classes would be things like identifiers,

27
00:02:34,730 --> 00:02:41,730
关键词, 我, 然后是单独的语法比如一个开放的paren或者一个闭合的
Keywords. I, and then individual pieces of syntax like an open paren or a close

28
00:02:44,200 --> 00:02:51,200
帕伦, 这些是他们自己的课程, A, 数字, 还有, 这里
paren, those are the classes by themselves. A, numbers. And again, there

29
00:02:53,540 --> 00:02:58,799
是更多的类但是有一组很厚的类, 每一个都有
are more classes but there's a thick set of classes and each one of these

30
00:02:58,799 --> 00:03:05,799
对应于一些可能出现在程序中的字符串。
corresponds to some set of strings that could appear in a program. So token

31
00:03:07,279 --> 00:03:14,279
类对应于一组字符串, 而听不清字符串可以被描述
classes correspond to sets of strings, And [inaudible] strings can be described

32
00:03:14,409 --> 00:03:19,689
相对直接的, 例如, 标识符的记号类
relatively straightforwardly so for example. The token class of identifiers in

33
00:03:19,689 --> 00:03:23,999
大多数编程语言可能类似于字符串或字符串
most programming languages might be something like strings of letters or

34
00:03:23,999 --> 00:03:28,609
数字, 从一个字母开始, 例如, 一个变量名或标识符
digits, starting with a letter. So for example, a variable name or identifier

35
00:03:28,609 --> 00:03:35,609
可以是a1, 也可以是f00也可以是b17, 所有这些
could be something like a1 or it could be f00 or it could be, b17, all of those

36
00:03:37,749 --> 00:03:41,169
会是有效的标识符通常, 它们会是额外的字符
would be, be valid identifiers and often, often they'll be additional characters

37
00:03:41,169 --> 00:03:45,689
这允许标识符但这是基本思想, 非常, 通常是主要的
that allowed identifiers but that's the basic idea, Very, very often The main

38
00:03:45,689 --> 00:03:52,689
限制标识符必须开始, 有一个字母, 一个整数
restriction identifiers that they have to start, with a letter, An integer and

39
00:03:52,879 --> 00:03:56,359
一个整数的典型定义是一个非空的数字串。
typical definition of an integer is a non-empty string of digits. So, something

40
00:03:56,359 --> 00:04:02,650
比如0或12, 好的, 一个接着两个我应该说实际上是一串
like zero or twelve. Okay. One followed by two I should say is actually a string of

41
00:04:02,650 --> 00:04:07,900
这个例子中的数字, 是的, 实际上它是承认一些数字
number in this case. And, and yeah, it is actually whether admit some numbers you

42
00:04:07,900 --> 00:04:13,059
可能不会想到, 像001这样的东西会是一个数字的有效表示
might not think of. Things like 001 would be a valid representation of a number or

43
00:04:13,059 --> 00:04:20,059
根据这个定义, 即使00也可以是一个有效的整数。
even 00 could be a valid integer according to this definition. Keywords are typically

44
00:04:20,899 --> 00:04:27,300
这是一组固定的词所以这里我列出了一些, 如果, 开始, 
just a fix set of reserved words and so here I've listed a few, else, if, begin,

45
00:04:27,300 --> 00:04:34,120
等等, 然后白色空间本身就是一个令牌类所以我们不得不说
and so on. And then white space as itself a token class so we actually have to say

46
00:04:34,120 --> 00:04:38,889
在这个字符串中这是程序的表示每个字符都是
in that string which is the representation of the program what every character in

47
00:04:38,889 --> 00:04:43,870
这个字符串, 什么令牌或者什么令牌类它是每个子串的一部分
that string, what token or what token class it's a part of. What every substring

48
00:04:43,870 --> 00:04:48,360
是其中的一部分, 包括空白区域, 例如, 如果我们有一个级数
is a part of and that includes the white space. So, for example if we have a series

49
00:04:48,360 --> 00:04:52,830
在三个空格中, 如果我说if然后是一个开放的paren我有三个空格
of three blanks, if I say if and then an open paren and I have three blanks in

50
00:04:52,830 --> 00:04:59,830
这里, 这三个空白的s会被组合成白色的空间, 所以我们的目标是
here, these three blank s would be grouped together as white space. So the goal of

51
00:05:03,569 --> 00:05:08,680
词法分析是根据程序的角色对程序的子串进行分类。
lexical analysis is to classify substrings of the program according to their role.

52
00:05:08,680 --> 00:05:15,349
这是令牌类, 好吗？它是一个关键字, 一个变量标识符, 然后
This is the, the token class, okay? Is it a keyword, a variable identifier, And then

53
00:05:15,349 --> 00:05:21,199
要将这些令牌与解析器通信, 因此, 在这里画一个图, 让我们
to communicate these tokens, to the parser. So, drawing a picture here, let's

54
00:05:21,199 --> 00:05:28,199
切换颜色。词法分析器与解析器进行通信。
switch colors. The lexical analyzer communicates with the parser. Okay and the

55
00:05:33,370 --> 00:05:39,949
这里的功能是, 词法分析器接受一个字符串。
functionality here is that, the lexical analyzer takes in a string. Typically

56
00:05:39,949 --> 00:05:45,210
存储起来, 也只是一个字节序列然后当解析器听不清时
stored up, also just a sequence of bytes and then when [inaudible] to the parser is

57
00:05:45,210 --> 00:05:52,210
顺序或对, 也就是令牌类, 还有子串, 我想说
sequence or pairs which are the token class. And substring which I would say

58
00:05:53,169 --> 00:05:59,479
这里的字符串, 也就是字符串的集合这是其中的一部分
string here, that, that, of which is the sets of string which is a part of the

59
00:05:59,479 --> 00:06:05,770
和这个类一起输入它在语言中所起的作用, 以及这个
input along with the class the role that it plays in the in the language, and this

60
00:06:05,770 --> 00:06:12,770
一对组合被称为令牌, 例如, 如果我的字符串是f00=42, 
pair together is called a token. So for example, if my string is that f00 = 42,

61
00:06:17,360 --> 00:06:24,360
好了, 这就会进入词法分析程序, 我就会讲到
all right, then that will go to the lexical analyzer and that will come, I'll

62
00:06:24,460 --> 00:06:31,460
写在这里, 三个记号, 这些是标识符, 谁？操作员说
write down here, three tokens. And these would be identifier. Who? Operator say

63
00:06:38,669 --> 00:06:45,669
等于。整数, 抱歉, 42, 这里我把这些东西留作字符串
equals. And. Integer, excuse me 42. And here I just left these things as strings

64
00:06:54,360 --> 00:06:58,099
为了强调这些是字符串, 所以这不是第42个数字
to, to emphasize that these are strings. So this is not the number 42 at this point

65
00:06:58,099 --> 00:07:03,840
在时间上, 它是字符串42这是一个在编程中扮演一个整数的角色
in time, it's, it's the string 42 which is a plays an integer role in the programming

66
00:07:03,840 --> 00:07:07,789
语言, 然后这些, 当这个输入的价格是这个
language. And then these, and when the price that takes this input is this

67
00:07:07,789 --> 00:07:13,120
成对的序列, 所以词法分析器本质上是在输入字符串上运行的
sequence of pairs. So the lexical analyzer essentially runs over the input string and

68
00:07:13,120 --> 00:07:19,990
把它分成成对的序列, 每一对都是一个令牌类和a
chunks it up into the sequence of pairs where each pair is a token class and a

69
00:07:19,990 --> 00:07:26,379
原始输入的子串, 当我们从一开始就讲这个例子
substring of the original input. As we turn to the example from the beginning of

70
00:07:26,379 --> 00:07:30,909
视频, 在这里它被写成一个字符串, 我们现在的目标是词法方面的
the video, here it is written out as a string. And our goal now is to lexically

71
00:07:30,909 --> 00:07:37,139
分析这段代码, 我们想要遍历并识别子字符串
analyze this fragment of code. We want to go through and identify the substrings

72
00:07:37,139 --> 00:07:41,710
这是令牌, 也是它们的令牌类, 因此, 要做到这一点, 我们需要
that are tokens and also their token classes. So, to do this, we're gonna need

73
00:07:41,710 --> 00:07:46,900
一些令牌类, 让我们给自己一些可以使用的东西。
some token classes. So let's give ourselves some of those to work with.

74
00:07:46,900 --> 00:07:53,900
我们需要白色空间, 这是一个空格, 新行标签, 
We'll need white space. And, and so this is sequences of blanks, new lines tab,

75
00:07:55,419 --> 00:08:02,419
用关键字之类的东西, 我们需要变量, 我们会调用
things like that with the keywords. And we'll need variables which we'll call

76
00:08:05,129 --> 00:08:12,129
标识符, 我们需要整数现在我把这些数字记在这里
identifiers. And we'll need integers and now I'll call those numbers. Here and then

77
00:08:17,840 --> 00:08:24,840
我们将会有一些其他的操作一些其他的类比如open paren
we're going to have some other operations some other classes things like open paren

78
00:08:26,099 --> 00:08:30,840
关闭paren和分号这些都很有趣, 这三个有趣的
close paren, and semi colon and these are interesting. These three ae interesting

79
00:08:30,840 --> 00:08:36,640
因为它们是单字符令牌类, 它是一组字符串
because they're single character token classes that is, is a set of strings but

80
00:08:36,640 --> 00:08:40,400
只是, 在集合中只有一个字符串所以打开的paren对应的是精确的
is only, is only one string in the set so the open paren corresponds to exact

81
00:08:40,400 --> 00:08:44,960
听不清的字符串只包含开放的paren, 通常的标点符号
[inaudible] strings that contain only open paren. So often the punctuation marks of

82
00:08:44,960 --> 00:08:51,000
这门语言都是自己的标记类, 另一个标点符号
the language are in token classes all by themselves. Another piece of punctuation

83
00:08:51,000 --> 00:08:54,940
这里我们要添加的是赋值, 它本身就是一个令牌类
that we'll add here is, is assignments. That will be a token class by itself

84
00:08:54,940 --> 00:09:01,460
因为这是一个很重要的操作, 但是, 双等号是a类
because it's such an important operation. But, the double equals will class as a

85
00:09:01,460 --> 00:09:07,890
这个类的关系运算符把它放在这里, 好了, 现在
relational operator with this class as an operator put it up here. Alright, So now

86
00:09:07,890 --> 00:09:13,690
我们要做的是, 我们要对这个字符串进行标记, 我是
what we're going to do is we're gonna go through and tokenized this string and I'm

87
00:09:13,690 --> 00:09:19,090
为每一个子串写下来, 它是什么类, 你知道, 我只是想
going to write down for each substring. What class it is. You know, I'm just gonna

88
00:09:19,090 --> 00:09:25,510
使用这个类的第一个字母, 它只是为了节省时间, 所以我
use the first letter here of the class. It's indicated just to save time so I

89
00:09:25,510 --> 00:09:30,780
不需要把所有的东西都写出来, 因此, 我们改变颜色, 这样我们就可以在a中做这个
don't have to write everything up. Hence, we change colors so we can do this in a

90
00:09:30,780 --> 00:09:37,780
不同的颜色, 第一个令牌是白色空间令牌, 然后
different color. So, the first token here is white space token and then that

91
00:09:37,940 --> 00:09:43,720
然后是F关键字, 好了, 然后这里有一个空白, 这是另一个
followed by the F keyword. So, okay, And then we have a blank here which is another

92
00:09:43,720 --> 00:09:49,660
空白区域, 然后是开放的paren这是它自己的令牌类所以我就离开
white space and then the open paren which is its own token class so I'll just leave

93
00:09:49,660 --> 00:09:56,660
它在那里识别, 然后我们有一个标识符, 好的, 空格和
it to identify itself there and then we have an identifier. Okay, White space and

94
00:09:58,530 --> 00:10:04,820
然后是一个算子, 双等号, 另一个空白, 这是空白区域
then an operator, the double-equals. Another blank so that's white space

95
00:10:04,820 --> 00:10:10,470
后面是另一个标识符后面是关闭括号, 这里是一个标点符号
followed by another identifier followed by close parens, Again, a punctuation mark in

96
00:10:10,470 --> 00:10:14,840
一个令牌类, 然后我们有三个空白字符, 这些是
a token class by itself. And then we have three white space characters so those are

97
00:10:14,840 --> 00:10:21,840
作为一个白色的空间令牌组合在一起, 然后是另一个标识符
group together as a white space token, Followed by another identifier and more

98
00:10:23,700 --> 00:10:30,230
空格, 然后是另一个字符令牌, 赋值运算符, 
white space and then another single character token, the assignment operator,

99
00:10:30,230 --> 00:10:36,310
空格和数字, 然后是sem i冒号, 标点符号和a
white space and a number, And then sem i colon again and punctuation mark and a

100
00:10:36,310 --> 00:10:42,470
令牌类单独使用。两个空格字符可以组合在一起。
token class by itself. Two white space characters can group together. What

101
00:10:42,470 --> 00:10:49,030
下面是一个关键字, 因此它被分类为关键字标记类。
follows in is a keyword, so it gets classified as in the keyword token class.

102
00:10:49,030 --> 00:10:56,030
另一个白色空格字符, 然后是另一个标识符, 实际上
Another run of white space characters and then another identifier. There's actually

103
00:10:57,910 --> 00:11:04,300
这里是一个空白, 我们几乎把它覆盖了没有标记, 赋值运算符
a blank there where we almost covered it up without marks. The assignment operator

104
00:11:04,300 --> 00:11:11,300
它本身在一个令牌类中, 空格, 一个数字, 最后是半冒号
by itself in a token class, white space, a number, and finally the semi colon by

105
00:11:12,380 --> 00:11:18,760
它本身, 还有我们的记号化, 我们已经确定了子串, 我们
itself. And there is our tokenization. We've identified the substrings and we've

106
00:11:18,760 --> 00:11:21,820
也用它的令牌类标记每一个。
also labeled each one with its token class.
