0
00:00:03,990 --> 00:00:07,850
欢迎回来, 在这个视频中我们将讨论如何转换正则表达�?
Welcome back, In this video we're going to talk about converting regular expressions

1
00:00:07,850 --> 00:00:14,850
在非确定性有限自动机中, 在我们开始之前, 我想给你们一�?
into non-deterministic finite automata. Before we get started I wanna give you an

2
00:00:16,740 --> 00:00:21,840
下面几节视频的概述, 我们有一个词汇规�?
overview of the plan for the next few videos. We have a lexical specification

3
00:00:21,840 --> 00:00:27,060
我们想要实现的第�?步是让某人把它写下来
that we want to implement and the first step is for someone to write that down as

4
00:00:27,060 --> 00:00:32,820
�?组正则表达式, 现在它咬了�?有的课程而不是实现, 
a set of regular expressions. Now that bites all the courses not implementation,

5
00:00:32,820 --> 00:00:37,910
这就是规范, �?以我们必须把它转化成�?个程�?
that's just specification. So we have to translate that into a program that can

6
00:00:37,910 --> 00:00:43,270
实际上进行词法分析, 这实际上发生在几个步骤中�?
actually do lexical analysis and this actually happens in several steps. The

7
00:00:43,270 --> 00:00:48,830
第一部分是将正则表达式转换为非确定�?�有�?
first part is a translate Those regular expressions into non-deterministic finite

8
00:00:48,830 --> 00:00:54,260
自动识别相同的东西, 完全�?样的东西, 然�?
automata that recognize the same, exactly the same thing. And then those

9
00:00:54,260 --> 00:00:59,580
非确定�?�自动机被转换为确定性自动机�?�?
non-deterministic automata are translated into deterministic automata and finally

10
00:00:59,580 --> 00:01:05,150
这些确定性自动机是作为一组查找表实现�?
those deterministic automata are implemented as a set of Lookup tables and

11
00:01:05,150 --> 00:01:12,150
在之前的视频中, 我们讲了�?些代码来遍历这些表格
a little bit of code for traversing those tables. So in previous videos, we talked

12
00:01:13,649 --> 00:01:18,880
关于这部分, 我们也定义了这部分, 现在我们准备好了
about this piece and we've also defined this piece. And so now we're ready to put

13
00:01:18,880 --> 00:01:23,460
整个事件, 在这个视频中, 我们将重点关�?
the whole thing together and in this particular video, we're going to focus on

14
00:01:23,460 --> 00:01:27,100
这里的这个分量, 正则表达式的转换
this component right here, The translation of regular expressions to

15
00:01:27,100 --> 00:01:34,100
非确定�?�的有限自动机, �?以这个计划是针对每一种常规的
non-deterministic finite automata. So the plan is that for each kind of regular

16
00:01:35,340 --> 00:01:41,890
表达式我们将会找到一个等价的非确定�?�自动机�?
expression we're going to find an equivalent Non-deterministic Automata,

17
00:01:41,890 --> 00:01:46,259
自动接受与语�?或规则完全相同的语言
automaton that accepts exactly the same language as the language or a regular

18
00:01:46,259 --> 00:01:51,319
表达式, 这里有一些我们要用到的符号, 我们来定�?
expression. And here's a little bit of notation we're gonna use. We'll define

19
00:01:51,319 --> 00:01:56,119
这些自动机用于正则表达式通常, 我们要做的�?
these automaton for regular expressions and usually, what we're going to be doing

20
00:01:56,119 --> 00:02:00,280
�?要修改它们的起始状�?�和它们的最终状态所以我们只�?�?
is needing to modify their start states and their final states so we'll just

21
00:02:00,280 --> 00:02:04,819
用l和最终状态表示起始状态, 用双圆圈表示
indicate the start state with the l and the final state. With the double circle

22
00:02:04,819 --> 00:02:08,280
我们不会太过担心机器的整体结�?
and we won't worry too much about the overall structure of the machine as long

23
00:02:08,280 --> 00:02:13,920
因为我们有一个关于起始状态和�?终状态的句柄, 我应该�?
as we have a handle on the start state and the final state. I should say that in the

24
00:02:13,920 --> 00:02:20,810
我们在这里构建的机器, 只会有�?个最终状态, 好, 我们�?始吧�?
machines we'll build here, there will only be one final state. Okay, so let's begin.

25
00:02:20,810 --> 00:02:27,220
对于epsilon正则表达式, �?旦接受它的机器, 好的
So for the epsilon regular expression, once the machine that accepts that, well

26
00:02:27,220 --> 00:02:31,690
这是�?个非常简单的机器, 我们可以有�?个起始状态和�?个最终状�?
this is a very simple machine. We can just have a start state and a final state and

27
00:02:31,690 --> 00:02:38,690
它们之间的转换, �?以这台机器完全接受空字符串�??
epsilon transition between them so this machine accepts exactly the empty string.

28
00:02:39,500 --> 00:02:45,720
当然对于单个字符A, 我们可以定义一个转换两个状态机
Certainly for a single character A, we can define a one transition two state machine

29
00:02:45,720 --> 00:02:50,120
它接受一个字符, �?以从�?始状态我们可以移动到�?后一个字�?
that accepts that one character. So from the start state we can move to the final

30
00:02:50,120 --> 00:02:54,480
如果它只是, 如果我们读到那个特定的字符, 好的, 这些是
state if it only, if we read that particular character, okay. So those are

31
00:02:54,480 --> 00:03:00,480
两个�?单的正则表达式现在我们要做复合规�?
out two simple regular expressions and now we have to do the compound regular

32
00:03:00,480 --> 00:03:05,530
这些都是小听不清的, 让我们来讨论�?�?
expressions. And these are little [inaudible] involved. So let's talk about

33
00:03:05,530 --> 00:03:11,570
首先是连接, �?以, 因为我们要把这些机器�?
concatenation first. And so, because we're gonna build these machines up from

34
00:03:11,570 --> 00:03:16,040
更小的, 正则表达式对于较大的表达式, 我们可以假设我们已经
smaller. Regular expressions to larger ones, we can assume that we've already

35
00:03:16,040 --> 00:03:21,880
在两台机器中分别转换了A和B, 所以我有了A和B的机器�??
converted A and B separately in two machines. So I have the machine for A. And

36
00:03:21,880 --> 00:03:26,340
要有�?台B的机器现在我要做的就是告诉大家如何粘�?
to have a machine for B and now all I have to do is say how I'm going to paste

37
00:03:26,340 --> 00:03:30,130
这两台机器一起组成了�?台机器, �?个复合机�?
together these two machines to form a machine, a compound machine that

38
00:03:30,130 --> 00:03:34,790
识别与b连接的相同语�?, 这�?
recognizes the same language as a concatenated with B. And here's the

39
00:03:34,790 --> 00:03:39,270
构建, 复合机器的启动状�?�将是开始状�?
construction, the start state for the compound machine will be the start state

40
00:03:39,270 --> 00:03:43,890
对于A, 我们只�?要保持初始状态不变然后我们修�?
for A so we'll just keep that start state for A the same and then we modify the

41
00:03:43,890 --> 00:03:48,230
�?后状态A, 所以我们把A的最终状态不再是�?终状�?
final state of A. So we make the final state of A no longer a final state and

42
00:03:48,230 --> 00:03:53,960
我在这里做了这个, 去掉了�?后状态的两个�?
I've done that here by removing the double circle on the final state of A andthe

43
00:03:53,960 --> 00:03:59,170
向B的起始状态转换, 如果我们考虑�?下, 就会这样
epsilon transition to the start state of B. Now if we think about it, that does

44
00:03:59,170 --> 00:04:03,150
这是正确的但也就是说, 首先你要认识到
exactly the right thing but that says, is that first you recognize some portion of

45
00:04:03,150 --> 00:04:08,010
属于A语言的输入, 当我们讲到它的时候, 会�?�样
the input that belongs to the language of A, and when we get to that, what would

46
00:04:08,010 --> 00:04:12,990
作为A的最终状态, 我们可以跳到B的开始状态�?�不�?要消耗任�?
been the final state of A, we can jump to the start state of B without consuming any

47
00:04:12,990 --> 00:04:17,759
输入, 然后试�?把剩下的字符串作为语�?的一部分, 作为a
input and then try to read the rest of the string as part of the language, as, as a

48
00:04:17,759 --> 00:04:24,740
在b的语�?中, 对于联合我们有相似的分阶段的方法
string in the language of B. And for union we have a similar way of phasing together

49
00:04:24,740 --> 00:04:28,789
机器, 尽管结构有点不同所以我们, 在一个新�?
the machines. Although the, the structure is somewhat different so we, at a new

50
00:04:28,789 --> 00:04:33,990
对复合机器启动状态, A+B意味�?�?么？它的意�?�是
start state for the compound machine and What does A + B mean? It means either the

51
00:04:33,990 --> 00:04:38,759
输入是在A的语�?中, 或�?�是在b语言和epsilon转换的语�?�?
input is in the language of A, or it's in the language of B. And epsilon transitions

52
00:04:38,759 --> 00:04:42,819
很好地捕捉到这一点因为我们刚刚做出了�?个决�?
are really good for capturing this because we just make a decision right from the

53
00:04:42,819 --> 00:04:47,879
起始状�?�是字符串将会是A的语�?或�?�它将会出现�?
start state is the string going to be in language of A or is it going to be in the

54
00:04:47,879 --> 00:04:53,169
B的语�?, 所以我们做出了�?个非确定性的选择然后我们阅读
language of B. So we make a non-deterministic choice and then we read

55
00:04:53,169 --> 00:04:57,759
使用的字符串, 我们�?�择的自动机如果我们进入到最终的结果
the string as using that, the automaton that we chose and if we get to the final

56
00:04:57,759 --> 00:05:02,550
状�?�, 或�?�是那些机器我们可以让它向新的决赛过�?
state. Either those machines we can make the epsilon transition to the new final

57
00:05:02,550 --> 00:05:06,289
复合机器的状态, 现在记住接受的概念是�?�?
state for the compound machine. Now remember what the notion is of acceptance

58
00:05:06,289 --> 00:05:10,729
对于非确定�?�自动机, 你知道吗？他们做这些猜测, 但如果有的话
for Nondeterministic Automata, you know? They make these guesses but if there's any

59
00:05:10,729 --> 00:05:16,270
这是可行的, 然后我们说它是在机器的语�?中, 如果�?
guess that works, then we say that it's in the language of the machine. So, if in

60
00:05:16,270 --> 00:05:21,629
事实上弦是在A或B的结合中然后选择A或�?�择B
fact the string is in the union of A or B then either choosing A or choosing B will

61
00:05:21,629 --> 00:05:28,629
工作, 所以机器会接受这个字符串, �?后是�?复杂�?
work and so the machine will accept the string. And finally the most complicated

62
00:05:30,139 --> 00:05:35,240
迭代的例子是星号, 我们有下面的构造, 这是
case for iteration is star, we have the following construction, So here's the

63
00:05:35,240 --> 00:05:41,060
机器A, 嵌入到这里, 我们添加了�?个新的开始状态和�?个新的final
machine for A, Embedded in here. We've added a new start state and a new final

64
00:05:41,060 --> 00:05:46,219
状�?�, 现在, 让我们来讨论一下它是如何工作的, 一种可能�?�是, 记�?
state, And now, let's talk about how this works. So one possibility is, remember

65
00:05:46,219 --> 00:05:53,219
这个epsilon总是用一颗恒星的语言, 所以我们在这里有一个过渡, 
that epsilon is always in the language of A star, and so we have this transition here,

66
00:05:53,509 --> 00:05:57,159
我们可以直接从开始状态到�?终状态接受空
We can go straight from the start state to the final state and accept the empty

67
00:05:57,159 --> 00:06:01,520
字符串, �?以, 这就保证了空字符串在语言中�??
string. And so, that just guarantees that the empty string is in the language.

68
00:06:01,520 --> 00:06:05,830
否则, 我们要做什么呢？否则, 我们可以做一个过渡, �?个epsilon
Otherwise, what do we do? Otherwise, we can make a transition, an epsilon

69
00:06:05,830 --> 00:06:10,050
过渡到A的开始状态然后我们可以, 从A的最终状�?
transition to the start state of A. And then we can, from the final state of A if

70
00:06:10,050 --> 00:06:14,289
我们到达它, 我们可以回到整个机器的启动状态我们可以这样做
we reach it, we can go back to the start state of the whole machine and we can do

71
00:06:14,289 --> 00:06:20,789
这是我们喜欢的次数, 好的, 这是A的迭代, 包围�?
this as many times as we like. Okay, So, there's the iteration of A, Surround this

72
00:06:20,789 --> 00:06:26,479
在这里循环, 当我们到达A的最终状态时我们也可以决�?
loop right here, And when we reach the final state of A we can also decide to

73
00:06:26,479 --> 00:06:30,469
只要转换到机器的�?终状态, 我们就会得出�?后一个结�?
just make a transition to the final state of the machine, we conclude that the last

74
00:06:30,469 --> 00:06:37,469
时间, 所以这台机器在a语言中识别零个或更多的字符串
time. And so this machine recognizes zero or more strings in the language of A. So

75
00:06:40,550 --> 00:06:45,110
现在, 让我们做一个例子, 这是�?个正则表达式我们想要构建�?�?
now, let's do an example, So here's a regular expression and we want to build a

76
00:06:45,110 --> 00:06:49,840
识别sa me语言的等效非确定性机器, 我们
equivalent nondeterministic machine that recognizes the sa me language and we're

77
00:06:49,840 --> 00:06:56,199
按照我们的结构, 通过归纳法对其结构进行归�?
gonna follow our construction, Which works by induction on the structure of the

78
00:06:56,199 --> 00:06:59,830
正则表达式从�?单的正则表达式开始并建立起来
regular expressions starting with the simple regular expressions and building up

79
00:06:59,830 --> 00:07:05,729
对于化合物, 我们这里有什么？我们有一个接受的机器
to the compound one so what do we have here? So we have a machine for accepting

80
00:07:05,729 --> 00:07:09,949
�?个, 好的, 所以我们需要一台机器来接受�?个如果我们叫它有两个
one, okay. So we need a machine that accepts one and if we call it had two

81
00:07:09,949 --> 00:07:15,710
状�?�和它, 你知道, 在两个数字之间做了一个过�?
states and it just, you know made a transition between the two on the number

82
00:07:15,710 --> 00:07:22,710
�?种, 类似于接受零的机器, 好了, 现在, 我们�?要把它们放在�?�?
one, Similarly a machine for accepting zero. Okay, And now, we need to put them

83
00:07:23,059 --> 00:07:28,270
在一个接�?1�?0的机器中, 我们这样做的方式是
together in a machine that accepts either one or zero. And the way we did that is we

84
00:07:28,270 --> 00:07:35,270
从A�?始, 从一个开始状态到你可以使用的复合机器
made a choice from A, from a start state for the compound machine where you can

85
00:07:35,949 --> 00:07:40,699
或�?�移动到机器上接受一个或机器接受零�??
either move to the machine for accepting one or the machine for accepting zero. And

86
00:07:40,699 --> 00:07:46,479
然后, 在�?后, 也就是epsilon回到了最后的状�??
then we have, at the end, also epsilon moves back to the final state of the

87
00:07:46,479 --> 00:07:52,599
复合机器, 好的, 现在我们�?要对它进行迭代所以我们需要能�?
compound machine. Okay, And now we need to iterate this so we need to be able to

88
00:07:52,599 --> 00:07:59,599
接受0或更多的1�?0, 所以我们要取整块木�?
accept zero or more of one's or zero's and so we're going to take this entire Block

89
00:08:00,789 --> 00:08:07,789
把它粘贴到我们为迭代�?发的模式中我们要怎么做呢�?
here and paste it into the pattern that we had for iteration so how do we do that?

90
00:08:08,509 --> 00:08:13,379
好的, 我们有�?个新的开始状态和�?个新的最终状态, 好的, 这是一个epsilon
Well, we have a new start state and a new final state, okay. And there's an epsilon

91
00:08:13,379 --> 00:08:18,259
从开始状态移动到新的�?终状态以保证我们接受
move from the start state to the new final state to guarantee that we accept the

92
00:08:18,259 --> 00:08:23,879
空字符串, 然后我们可以多次迭代这个内部机�?
empty string. And then we can just iterate this inner machine as many times as we

93
00:08:23,879 --> 00:08:29,059
比如, 我们可以把它移到起始状态, 我们可以执行机器
like. We can make an epsilon move to the start state, We could execute the machine

94
00:08:29,059 --> 00:08:34,490
如果我们决定要再做一次, 我们可以这样做, 好的, 回�?
ones and if we decide we want to do it again, well we can do that. Okay, Go back

95
00:08:34,490 --> 00:08:38,990
再过�?段时间, 或�?�从�?终状态, 我们可以决定我们已经看到�?
around for another time, Or from the final state, we can decide that we've seen

96
00:08:38,990 --> 00:08:43,089
足够了, 我们可以移动到复合机器的�?终状态, �?以这�?
enough and we can just move to the final state of the compound machine. So this

97
00:08:43,089 --> 00:08:48,880
然后机器接受1+0的语�?, 现在, 我们有了更多的信�?
machine then accepts the language one + zero'lt;i>. And now, we have a little bit more'lt;/i>

98
00:08:48,880 --> 00:08:54,740
要做, 我们必须接受, 我们有其他的机器只接受一个, �?以我们建�?
to do. We have to accept, we have other machine that accepts just one so we build

99
00:08:54,740 --> 00:09:01,740
另一个接受数�?1的机器现在我们需要组合其中的两个
another machine that accepts The digit one and now we need to compose two of these

100
00:09:04,570 --> 00:09:08,660
把它们连接起来这很简单, 我们只是有一个极小的移动
things, to concatenate them and that was very simple. We just have an epsilon move

101
00:09:08,660 --> 00:09:13,120
从第�?个机器的�?终状态到第二个mac hine的开始状�?
from the final state of the first machine to the start state of the second mac hine

102
00:09:13,120 --> 00:09:17,430
这些都是�?终机器的状�?�, 我们现在�?�?
and then these are all the states of the final machine. And we just need to now

103
00:09:17,430 --> 00:09:21,730
标记我们�?终的, 最终状态或者我们将要使用的状�?�的结束
label our final, final state or the end of the state that we're actually gonna use in

104
00:09:21,730 --> 00:09:25,910
整个机器的最终状态的结束应该是这个和
the end of the final state of the entire machine which should be that one and the

105
00:09:25,910 --> 00:09:32,910
�?始状态, 也就是这里的状�?�, 这就是整个结�?
start state, Which is this state over here. And that's the entire construction

106
00:09:33,529 --> 00:09:38,230
对于非确定�?�自动机或非确定性自动机可以识别
for the non-deterministic automata or a non-deterministic automata that recognizes

107
00:09:38,230 --> 00:09:38,730
这种语言�?
this language.
